(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{429:function(v,t,_){"use strict";_.r(t);var a=_(26),r=Object(a.a)({},(function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"设计模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[v._v("#")]),v._v(" 设计模式")]),v._v(" "),_("h2",{attrs:{id:"设计模式是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设计模式是什么"}},[v._v("#")]),v._v(" 设计模式是什么？")]),v._v(" "),_("p",[v._v("设计模式是软件设计中常见问题的典型解决方案。 它们就像能根据需求进行调整的预制蓝图， 可用于解决代码中反复出现的设计问题。")]),v._v(" "),_("p",[v._v("设计模式与方法或库的使用方式不同， 你很难直接在自己的程序中套用某个设计模式。 模式并不是一段特定的代码， 而是解决特定问题的一般性概念。 你可以根据模式来实现符合自己程序实际所需的解决方案。")]),v._v(" "),_("p",[v._v("人们常常会混淆模式和算法， 因为两者在概念上都是已知特定问题的典型解决方案。 但算法总是明确定义达成特定目标所需的一系列步骤， 而模式则是对解决方案的更高层次描述。 同一模式在两个不同程序中的实现代码可能会不一样。")]),v._v(" "),_("p",[v._v("算法更像是菜谱： 提供达成目标的明确步骤。 而模式更像是蓝图： 你可以看到最终的结果和模式的功能， 但需要自己确定实现步骤。")]),v._v(" "),_("h2",{attrs:{id:"历史"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#历史"}},[v._v("#")]),v._v(" 历史")]),v._v(" "),_("p",[v._v("模式的概念是由克里斯托佛·亚历山大在其著作 "),_("strong",[v._v("《建筑模式语言》")]),v._v(" 中首次提出的。 本书介绍了城市设计的 “语言”， 而此类 “语言” 的基本单元就是模式。 模式中可能会包含对窗户应该在多高、 一座建筑应该有多少层以及一片街区应该有多大面积的植被等信息的描述。")]),v._v(" "),_("p",[v._v("埃里希·伽玛、 约翰·弗利赛德斯、 拉尔夫·约翰逊和理查德·赫尔姆这四位作者接受了模式的概念。 1994 年， 他们出版了 "),_("strong",[v._v("《设计模式： 可复用面向对象软件的基础》")]),v._v(" 一书， 将设计模式的概念应用到程序开发领域中。 该书提供了 23 个模式来解决面向对象程序设计中的各种问题， 很快便成为了畅销书。 由于书名太长， 人们将其简称为 “四人组 （Gang of Four， GoF） 的书”， 并且很快进一步简化为 “GoF 的书”。")]),v._v(" "),_("h2",{attrs:{id:"三大模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三大模式"}},[v._v("#")]),v._v(" 三大模式")]),v._v(" "),_("blockquote",[_("p",[v._v('《设计模式》一书曾提到如下文字∶ "考虑你的设计中哪些地方可能变化，这种方式与关注会导致重新设计的原因相反。它不是考虑什么时候会迫使你的设计改变，而是考虑你怎样才能够在不重新设计的情况下进行改变。这里的关键在于封装发生变化的概念，这是许多设计模式的主题。"')])]),v._v(" "),_("p",[v._v('这段文字即是《设计模式》提到的"'),_("strong",[v._v("找到变化并封装之")]),v._v('"。《设计模式》一书中共归纳总结了23 种设计模式。')]),v._v(" "),_("p",[v._v("从"),_("strong",[v._v("意图/目的")]),v._v("上区分，23种设计模式被分为以下三类")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("创建型")]),v._v(" ：提供创建对象的机制， 增加已有代码的灵活性和可复用性")]),v._v(" "),_("li",[_("strong",[v._v("结构型")]),v._v(" ：如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效")]),v._v(" "),_("li",[_("strong",[v._v("行为型")]),v._v(" ：负责对象间的高效沟通和职责委派")])]),v._v(" "),_("p",[v._v("拿创建型模式来说，要创建一个对象，是一种抽象行为，而具体创建什么对象则是可以变化的，创建型模式的目的就是封装创建对象的变化。\n而结构型模式封装的是对象之间的组合关系。\n行为型模式封装的是对象的行为变化。")]),v._v(" "),_("h2",{attrs:{id:"避免掉进过度设计的怪圈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#避免掉进过度设计的怪圈"}},[v._v("#")]),v._v(" 避免掉进过度设计的怪圈")]),v._v(" "),_("p",[v._v("当你掌握一些设计模式或者手法之后，比较容易出现的问题就是过度设计。有的人甚至在一个应用中一定要将 23 种常见的设计模式运用上，这就本末倒置了。设计模式的四大要素中就明确指出，模式的运用应该根据软件系统所面临的问题来决定是否需要使用现有的设计。也就是说，再出现问题或者你预计会出现那样的问题时，才推荐使用特定的设计模式，而不是将各种设计模式套进你的软件中。")]),v._v(" "),_("p",[v._v("不管在设计、实现、测试之间有多少时间都应该避免过度设计，它会打破你的反馈回路，使你的设计得不到反馈，从而慢慢陷入危险中。所以你只需要保持简单的设计，这样就有时间来测试该设计是否真的可行，然后作出最后的决策。")]),v._v(" "),_("p",[v._v("当设计一款软件时，从整体高度上设定一种架构模式，确定应用的整体架构，然后再分析一些重要的设计思路，并且保证他们的简单性、清晰性，如果有时间可以使用 Java 代码模拟一个简单的原型，确保设计是可行的，最后就可以付诸行动了。切实不要过度的追求设计，适当就好，当我们发现或者预计到将要出现问题时，在判断是否需要运用设计模式。")])])}),[],!1,null,null,null);t.default=r.exports}}]);