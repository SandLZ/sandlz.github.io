import{_ as l,M as d,p as h,q as s,R as e,N as o,U as a,t,a1 as c}from"./framework-201fec1f.js";const g={},i=c('<h1 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h1><blockquote><p>正则表达式是一组由字母和符号组成的特殊文本, 它可以用来从文本中找出满足你想要的格式的句子.</p></blockquote><p>一个正则表达式是在一个主体字符串中从左到右匹配字符串时的一种样式. 例如&quot;Regular expression&quot;是一个完整的句子, 但我们常使用缩写的术语&quot;regex&quot;或&quot;regexp&quot;. 正则表达式可以用来替换文本中的字符串,验证形式,提取字符串等等.</p><p>想象你正在写一个应用, 然后你想设定一个用户命名的规则, 让用户名包含字符,数字,下划线和连字符,以及限制字符的个数,好让名字看起来没那么丑. 我们使用以下正则表达式来验证一个用户名:</p><p align="center"><img src="https://github.com/sandlz/images/raw/master/uPic/akFD8Q.jpg" alt="Regular expression"></p><p>以上的正则表达式可以接受 <code>john_doe</code>, <code>jo-hn_doe</code>, <code>john12_as</code>. 但不匹配<code>Jo</code>, 因为它包含了大写的字母而且太短了.</p>',6),p={class:"table-of-contents"},u=c(`<h2 id="_1-基本匹配" tabindex="-1"><a class="header-anchor" href="#_1-基本匹配" aria-hidden="true">#</a> 1. 基本匹配</h2><p>正则表达式其实就是在执行搜索时的格式, 它由一些字母和数字组合而成. 例如: 一个正则表达式 <code>the</code>, 它表示一个规则: 由字母<code>t</code>开始,接着是<code>h</code>,再接着是<code>e</code>.</p><pre style="color:#ccc;">&quot;the&quot; =&gt; The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat. 
</pre><p>正则表达式<code>123</code>匹配字符串<code>123</code>. 它逐个字符的与输入的正则表达式做比较.</p><p>正则表达式是大小写敏感的, 所以<code>The</code>不会匹配<code>the</code>.</p><pre style="color:#ccc;">&quot;The&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre><h2 id="_2-元字符" tabindex="-1"><a class="header-anchor" href="#_2-元字符" aria-hidden="true">#</a> 2. 元字符</h2><p>正则表达式主要依赖于元字符.<br> 元字符不代表他们本身的字面意思, 他们都有特殊的含义. 一些元字符写在方括号中的时候有一些特殊的意思. 以下是一些元字符的介绍:</p><table><thead><tr><th style="text-align:center;">元字符</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;">.</td><td>句号匹配任意单个字符除了换行符.</td></tr><tr><td style="text-align:center;">[ ]</td><td>字符种类. 匹配方括号内的任意字符.</td></tr><tr><td style="text-align:center;">[^ ]</td><td>否定的字符种类. 匹配除了方括号里的任意字符</td></tr><tr><td style="text-align:center;">*</td><td>匹配&gt;=0 个重复的在*号之前的字符.</td></tr><tr><td style="text-align:center;">+</td><td>匹配&gt;1 个重复的+号前的字符.</td></tr><tr><td style="text-align:center;">?</td><td>标记?之前的字符为可选.</td></tr><tr><td style="text-align:center;">{n,m}</td><td>匹配 num 个中括号之前的字符 (n &lt;= num &lt;= m).</td></tr><tr><td style="text-align:center;">(xyz)</td><td>字符集, 匹配与 xyz 完全相等的字符串.</td></tr><tr><td style="text-align:center;">|</td><td>或运算符,匹配符号前或后的字符.</td></tr><tr><td style="text-align:center;">\\</td><td>转义字符,用于匹配一些保留的字符 <code>[ ] ( ) { } . * + ? ^ $ \\ |</code></td></tr><tr><td style="text-align:center;">^</td><td>从开始行开始匹配.</td></tr><tr><td style="text-align:center;">$</td><td>从末端开始匹配.</td></tr></tbody></table><h2 id="_2-1-点运算符" tabindex="-1"><a class="header-anchor" href="#_2-1-点运算符" aria-hidden="true">#</a> 2.1 点运算符 <code>.</code></h2><p><code>.</code>是元字符中最简单的例子. <code>.</code>匹配任意单个字符, 但不匹配换行符. 例如, 表达式<code>.ar</code>匹配一个任意字符后面跟着是<code>a</code>和<code>r</code>的字符串.</p><pre style="color:#ccc;">&quot;.ar&quot; =&gt; The <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre><h2 id="_2-2-字符集" tabindex="-1"><a class="header-anchor" href="#_2-2-字符集" aria-hidden="true">#</a> 2.2 字符集</h2><p>字符集也叫做字符类. 方括号用来指定一个字符集. 在方括号中使用连字符来指定字符集的范围. 在方括号中的字符集不关心顺序. 例如, 表达式<code>[Tt]he</code> 匹配 <code>the</code> 和 <code>The</code>.</p><pre style="color:#ccc;">&quot;[Tt]he&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> car parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre><p>方括号的句号就表示句号. 表达式 <code>ar[.]</code> 匹配 <code>ar.</code>字符串</p><pre style="color:#ccc;">&quot;ar[.]&quot; =&gt; A garage is a good place to park a c<a href="#learn-regex"><strong>ar.</strong></a>
</pre><h3 id="_2-2-1-否定字符集" tabindex="-1"><a class="header-anchor" href="#_2-2-1-否定字符集" aria-hidden="true">#</a> 2.2.1 否定字符集</h3><p>一般来说 <code>^</code> 表示一个字符串的开头, 但它用在一个方括号的开头的时候, 它表示这个字符集是否定的. 例如, 表达式<code>[^c]ar</code> 匹配一个后面跟着<code>ar</code>的除了<code>c</code>的任意字符.</p><pre style="color:#ccc;">&quot;[^c]ar&quot; =&gt; The car <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre><h2 id="_2-3-重复次数" tabindex="-1"><a class="header-anchor" href="#_2-3-重复次数" aria-hidden="true">#</a> 2.3 重复次数</h2><p>后面跟着元字符 <code>+</code>, <code>*</code> or <code>?</code> 的, 用来指定匹配子模式的次数. 这些元字符在不同的情况下有着不同的意思.</p><h3 id="_2-3-1-号" tabindex="-1"><a class="header-anchor" href="#_2-3-1-号" aria-hidden="true">#</a> 2.3.1 <code>*</code> 号</h3><p><code>*</code>号匹配 在<code>*</code>之前的字符出现<code>大于等于0</code>次. 例如, 表达式 <code>a*</code> 匹配以 0 或更多个 a 开头的字符, 因为有 0 个这个条件, 其实也就匹配了所有的字符. 表达式<code>[a-z]*</code> 匹配一个行中所有以小写字母开头的字符串.</p><pre style="color:#ccc;">&quot;[a-z]*&quot; =&gt; T<a href="#learn-regex"><strong>he</strong></a> <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>parked</strong></a> <a href="#learn-regex"><strong>in</strong></a> <a href="#learn-regex"><strong>the</strong></a> <a href="#learn-regex"><strong>garage</strong></a> #21.
</pre><p><code>*</code>字符和<code>.</code>字符搭配可以匹配所有的字符<code>.*</code>. <code>*</code>和表示匹配空格的符号<code>\\s</code>连起来用, 如表达式<code>\\s*cat\\s*</code>匹配 0 或更多个空格开头和 0 或更多个空格结尾的 cat 字符串.</p><pre style="color:#ccc;">&quot;\\s*cat\\s*&quot; =&gt; The fat<a href="#learn-regex"><strong> cat </strong></a>sat on the <a href="#learn-regex">con<strong>cat</strong>enation</a>.
</pre><h3 id="_2-3-2-号" tabindex="-1"><a class="header-anchor" href="#_2-3-2-号" aria-hidden="true">#</a> 2.3.2 <code>+</code> 号</h3><p><code>+</code>号匹配<code>+</code>号之前的字符出现 &gt;=1 次个字符. 例如表达式<code>c.+t</code> 匹配以首字母<code>c</code>开头以<code>t</code>结尾,中间跟着任意个字符的字符串.</p><pre style="color:#ccc;">&quot;c.+t&quot; =&gt; The fat <a href="#learn-regex"><strong>cat sat on the mat</strong></a>.
</pre><h3 id="_2-3-3-号" tabindex="-1"><a class="header-anchor" href="#_2-3-3-号" aria-hidden="true">#</a> 2.3.3 <code>?</code> 号</h3><p>在正则表达式中元字符 <code>?</code> 标记在符号前面的字符为可选, 即出现 0 或 1 次. 例如, 表达式 <code>[T]?he</code> 匹配字符串 <code>he</code> 和 <code>The</code>.</p><pre style="color:#ccc;">&quot;[T]he&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.
</pre><pre style="color:#ccc;">&quot;[T]?he&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in t<a href="#learn-regex"><strong>he</strong></a> garage.
</pre><h2 id="_2-4-号" tabindex="-1"><a class="header-anchor" href="#_2-4-号" aria-hidden="true">#</a> 2.4 <code>{}</code> 号</h2><p>在正则表达式中 <code>{}</code> 是一个量词, 常用来一个或一组字符可以重复出现的次数. 例如, 表达式 <code>[0-9]{2,3}</code> 匹配 2~3 位 0~9 的数字.</p><pre style="color:#ccc;">&quot;[0-9]{2,3}&quot; =&gt; The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.
</pre><p>我们可以省略第二个参数. 例如, <code>[0-9]{2,}</code> 匹配至少两位 0~9 的数字.</p><p>如果逗号也省略掉则表示重复固定的次数. 例如, <code>[0-9]{3}</code> 匹配 3 位数字</p><pre style="color:#ccc;">&quot;[0-9]{2,}&quot; =&gt; The number was 9.<a href="#learn-regex"><strong>9997</strong></a> but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.
</pre><pre style="color:#ccc;">&quot;[0-9]{3}&quot; =&gt; The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to 10.0.
</pre><h2 id="_2-5-特征标群" tabindex="-1"><a class="header-anchor" href="#_2-5-特征标群" aria-hidden="true">#</a> 2.5 <code>(...)</code> 特征标群</h2><p>特征标群是一组写在 <code>(...)</code> 中的子模式. 例如之前说的 <code>{}</code> 是用来表示前面一个字符出现指定次数. 但如果在 <code>{}</code> 前加入特征标群则表示整个标群内的字符重复 N 次. 例如, 表达式 <code>(ab)*</code> 匹配连续出现 0 或更多个 <code>ab</code>.</p><p>我们还可以在 <code>()</code> 中用或字符 <code>|</code> 表示或. 例如, <code>(c|g|p)ar</code> 匹配 <code>car</code> 或 <code>gar</code> 或 <code>par</code>.</p><pre style="color:#ccc;">&quot;(c|g|p)ar&quot; =&gt; The <a href="#learn-regex"><strong>car</strong></a> is <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre><h2 id="_2-6-或运算符" tabindex="-1"><a class="header-anchor" href="#_2-6-或运算符" aria-hidden="true">#</a> 2.6 <code>|</code> 或运算符</h2><p>或运算符就表示或, 用作判断条件.</p><p>例如 <code>(T|t)he|car</code> 匹配 <code>(T|t)he</code> 或 <code>car</code>.</p><pre style="color:#ccc;">&quot;(T|t)he|car&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> <a href="#learn-regex"><strong>car</strong></a> is parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre><h2 id="_2-7-转码特殊字符" tabindex="-1"><a class="header-anchor" href="#_2-7-转码特殊字符" aria-hidden="true">#</a> 2.7 转码特殊字符</h2><p>反斜线 <code>\\</code> 在表达式中用于转码紧跟其后的字符. 用于指定 <code>{ } [ ] / \\ + * . $ ^ | ?</code> 这些特殊字符. 如果想要匹配这些特殊字符则要在其前面加上反斜线 <code>\\</code>.</p><p>例如 <code>.</code> 是用来匹配除换行符外的所有字符的. 如果想要匹配句子中的 <code>.</code> 则要写成 <code>\\.</code>.</p><pre style="color:#ccc;">&quot;(f|c|m)at\\.?&quot; =&gt; The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> sat on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre><h2 id="_2-8-锚点" tabindex="-1"><a class="header-anchor" href="#_2-8-锚点" aria-hidden="true">#</a> 2.8 锚点</h2><p>在正则表达式中, 想要匹配指定开头或结尾的字符串就要使用到锚点. <code>^</code> 指定开头, <code>$</code> 指定结尾.</p><h3 id="_2-8-1-号" tabindex="-1"><a class="header-anchor" href="#_2-8-1-号" aria-hidden="true">#</a> 2.8.1 <code>^</code> 号</h3><p><code>^</code> 用来检查匹配的字符串是否在所匹配字符串的开头.</p><p>例如, 在 <code>abc</code> 中使用表达式 <code>^a</code> 会得到结果 <code>a</code>. 但如果使用 <code>^b</code> 将匹配不到任何结果. 应为在字符串 <code>abc</code> 中并不是以 <code>b</code> 开头.</p><p>例如, <code>^(T|t)he</code> 匹配以 <code>The</code> 或 <code>the</code> 开头的字符串.</p><pre style="color:#ccc;">&quot;(T|t)he&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre><pre style="color:#ccc;">&quot;^(T|t)he&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.
</pre><h3 id="_2-8-2-号" tabindex="-1"><a class="header-anchor" href="#_2-8-2-号" aria-hidden="true">#</a> 2.8.2 <code>$</code> 号</h3><p>同理于 <code>^</code> 号, <code>$</code> 号用来匹配字符是否是最后一个.</p><p>例如, <code>(at\\.)$</code> 匹配以 <code>at.</code> 结尾的字符串.</p><pre style="color:#ccc;">&quot;(at\\.)&quot; =&gt; The fat c<a href="#learn-regex"><strong>at.</strong></a> s<a href="#learn-regex"><strong>at.</strong></a> on the m<a href="#learn-regex"><strong>at.</strong></a>
</pre><pre style="color:#ccc;">&quot;(at\\.)$&quot; =&gt; The fat cat. sat. on the m<a href="#learn-regex"><strong>at.</strong></a>
</pre><h2 id="_3-简写字符集" tabindex="-1"><a class="header-anchor" href="#_3-简写字符集" aria-hidden="true">#</a> 3. 简写字符集</h2><p>正则表达式提供一些常用的字符集简写. 如下:</p><table><thead><tr><th style="text-align:center;">简写</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;">.</td><td>除换行符外的所有字符</td></tr><tr><td style="text-align:center;">\\w</td><td>匹配所有字母数字, 等同于 <code>[a-zA-Z0-9_]</code></td></tr><tr><td style="text-align:center;">\\W</td><td>匹配所有非字母数字, 即符号, 等同于: <code>[^\\w]</code></td></tr><tr><td style="text-align:center;">\\d</td><td>匹配数字: <code>[0-9]</code></td></tr><tr><td style="text-align:center;">\\D</td><td>匹配非数字: <code>[^\\d]</code></td></tr><tr><td style="text-align:center;">\\s</td><td>匹配所有空格字符, 等同于: <code>[\\t\\n\\f\\r\\p{Z}]</code></td></tr><tr><td style="text-align:center;">\\S</td><td>匹配所有非空格字符: <code>[^\\s]</code></td></tr></tbody></table><h2 id="_4-前后关联约束-前后预查" tabindex="-1"><a class="header-anchor" href="#_4-前后关联约束-前后预查" aria-hidden="true">#</a> 4. 前后关联约束(前后预查)</h2><p>前置约束和后置约束都属于<strong>非捕获簇</strong>(用于匹配不在匹配列表中的格式). 前置约束用于判断所匹配的格式是否在另一个确定的格式之后.</p><p>例如, 我们想要获得所有跟在 <code>$</code> 符号后的数字, 我们可以使用正向向后约束 <code>(?&lt;=\\$)[0-9\\.]*</code>. 这个表达式匹配 <code>$</code> 开头, 之后跟着 <code>0,1,2,3,4,5,6,7,8,9,.</code> 这些字符可以出现大于等于 0 次.</p><p>前后关联约束如下:</p><table><thead><tr><th style="text-align:center;">符号</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;">?=</td><td>前置约束-存在</td></tr><tr><td style="text-align:center;">?!</td><td>前置约束-排除</td></tr><tr><td style="text-align:center;">?&lt;=</td><td>后置约束-存在</td></tr><tr><td style="text-align:center;">?&lt;!</td><td>后置约束-排除</td></tr></tbody></table><h3 id="_4-1-前置约束-存在" tabindex="-1"><a class="header-anchor" href="#_4-1-前置约束-存在" aria-hidden="true">#</a> 4.1 <code>?=...</code> 前置约束(存在)</h3><p><code>?=...</code> 前置约束(存在), 表示第一部分表达式必须跟在 <code>?=...</code>定义的表达式之后.</p><p>返回结果只瞒住第一部分表达式. 定义一个前置约束(存在)要使用 <code>()</code>. 在括号内部使用一个问号和等号: <code>(?=...)</code>.</p><p>前置约束的内容写在括号中的等号后面. 例如, 表达式 <code>[T|t]he(?=\\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>, 在括号中我们又定义了前置约束(存在) <code>(?=\\sfat)</code> ,即 <code>The</code> 和 <code>the</code> 后面紧跟着 <code>(空格)fat</code>.</p><pre style="color:#ccc;">&quot;[T|t]he(?=\\sfat)&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre><h3 id="_4-2-前置约束-排除" tabindex="-1"><a class="header-anchor" href="#_4-2-前置约束-排除" aria-hidden="true">#</a> 4.2 <code>?!...</code> 前置约束-排除</h3><p>前置约束-排除 <code>?!</code> 用于筛选所有匹配结果, 筛选条件为 其后不跟随着定义的格式 <code>前置约束-排除</code> 定义和 <code>前置约束(存在)</code> 一样, 区别就是 <code>=</code> 替换成 <code>!</code> 也就是 <code>(?!...)</code>.</p><p>表达式 <code>[T|t]he(?!\\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>, 且其后不跟着 <code>(空格)fat</code>.</p><pre style="color:#ccc;">&quot;[T|t]he(?!\\sfat)&quot; =&gt; The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre><h3 id="_4-3-后置约束-存在" tabindex="-1"><a class="header-anchor" href="#_4-3-后置约束-存在" aria-hidden="true">#</a> 4.3 <code>?&lt;= ...</code> 后置约束-存在</h3><p>后置约束-存在 记作<code>(?&lt;=...)</code> 用于筛选所有匹配结果, 筛选条件为 其前跟随着定义的格式. 例如, 表达式 <code>(?&lt;=[T|t]he\\s)(fat|mat)</code> 匹配 <code>fat</code> 和 <code>mat</code>, 且其前跟着 <code>The</code> 或 <code>the</code>.</p><pre style="color:#ccc;">&quot;(?&lt;=[T|t]he\\s)(fat|mat)&quot; =&gt; The<a href="#learn-regex"><strong>fat</strong></a> cat sat on the <a href="#learn-regex"><strong>mat</strong></a>.
</pre><h3 id="_4-4-后置约束-排除" tabindex="-1"><a class="header-anchor" href="#_4-4-后置约束-排除" aria-hidden="true">#</a> 4.4 <code>?&lt;!...</code> 后置约束-排除</h3><p>后置约束-排除 记作 <code>(?&lt;!...)</code> 用于筛选所有匹配结果, 筛选条件为 其前不跟着定义的格式. 例如, 表达式 <code>(?&lt;!(T|t)he\\s)(cat)</code> 匹配 <code>cat</code>, 且其前不跟着 <code>The</code> 或 <code>the</code>.</p><pre style="color:#ccc;">&quot;(?&lt;![T|t]he\\s)(cat)&quot; =&gt; The cat sat on <a href="#learn-regex"><strong>cat</strong></a>.
</pre><h2 id="_5-标志" tabindex="-1"><a class="header-anchor" href="#_5-标志" aria-hidden="true">#</a> 5. 标志</h2><p>标志也叫修饰语, 因为它可以用来修改表达式的搜索结果. 这些标志可以任意的组合使用, 它也是整个正则表达式的一部分.</p><table><thead><tr><th style="text-align:center;">标志</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;">i</td><td>忽略大小写.</td></tr><tr><td style="text-align:center;">g</td><td>全局搜索.</td></tr><tr><td style="text-align:center;">m</td><td>多行的: 锚点元字符 <code>^</code> <code>$</code> 工作范围在每行的起始.</td></tr></tbody></table><h3 id="_5-1-忽略大小写-case-insensitive" tabindex="-1"><a class="header-anchor" href="#_5-1-忽略大小写-case-insensitive" aria-hidden="true">#</a> 5.1 忽略大小写 (Case Insensitive)</h3><p>修饰语 <code>i</code> 用于忽略大小写. 例如, 表达式 <code>/The/gi</code> 表示在全局搜索 <code>The</code>, 在后面的 <code>i</code> 将其条件修改为忽略大小写, 则变成搜索 <code>the</code> 和 <code>The</code>, <code>g</code> 表示全局搜索.</p><pre style="color:#ccc;">&quot;The&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre><pre style="color:#ccc;">&quot;/The/gi&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre><h3 id="_5-2-全局搜索-global-search" tabindex="-1"><a class="header-anchor" href="#_5-2-全局搜索-global-search" aria-hidden="true">#</a> 5.2 全局搜索 (Global search)</h3><p>修饰符 <code>g</code> 常用于执行一个全局搜索匹配, 即(不仅仅返回第一个匹配的, 而是返回全部). 例如, 表达式 <code>/.(at)/g</code> 表示搜索 任意字符(除了换行) + <code>at</code>, 并返回全部结果.</p><pre style="color:#ccc;">&quot;/.(at)/&quot; =&gt; The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the mat.
</pre><pre style="color:#ccc;">&quot;/.(at)/g&quot; =&gt; The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> <a href="#learn-regex"><strong>sat</strong></a> on the <a href="#learn-regex"><strong>mat</strong></a>.
</pre><h3 id="_5-3-多行修饰符-multiline" tabindex="-1"><a class="header-anchor" href="#_5-3-多行修饰符-multiline" aria-hidden="true">#</a> 5.3 多行修饰符 (Multiline)</h3><p>多行修饰符 <code>m</code> 常用于执行一个多行匹配.</p><p>像之前介绍的 <code>(^,$)</code> 用于检查格式是否是在待检测字符串的开头或结尾. 但我们如果想要它在每行的开头和结尾生效, 我们需要用到多行修饰符 <code>m</code>.</p><p>例如, 表达式 <code>/at(.)?$/gm</code> 表示在待检测字符串每行的末尾搜索 <code>at</code>后跟一个或多个 <code>.</code> 的字符串, 并返回全部结果.</p><pre style="color:#ccc;">&quot;/.at(.)?$/&quot; =&gt; The fat
                cat sat
                on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre><pre style="color:#ccc;">&quot;/.at(.)?$/gm&quot; =&gt; The <a href="#learn-regex"><strong>fat</strong></a>
                  cat <a href="#learn-regex"><strong>sat</strong></a>
                  on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre><h2 id="额外补充" tabindex="-1"><a class="header-anchor" href="#额外补充" aria-hidden="true">#</a> 额外补充</h2><ul><li><em>正整数</em>: <code>^\\d+$</code></li><li><em>负整数</em>: <code>^-\\d+$</code></li><li><em>手机国家号</em>: <code>^+?[\\d\\s]{3,}$</code></li><li><em>手机号</em>: <code>^+?[\\d\\s]+(?[\\d\\s]{10,}$</code></li><li><em>整数</em>: <code>^-?\\d+$</code></li><li><em>用户名</em>: <code>^[\\w\\d_.]{4,16}$</code></li><li><em>数字和英文字母</em>: <code>^[a-zA-Z0-9]*$</code></li><li><em>数字和应为字母和空格</em>: <code>^[a-zA-Z0-9 ]*$</code></li><li><em>密码</em>: <code>^(?=^.{6,}$)((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.*$</code></li><li><em>邮箱</em>: <code>^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4})*$</code></li><li><em>IP4 地址</em>: <code>^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$</code></li><li><em>纯小写字母</em>: <code>^([a-z])*$</code></li><li><em>纯大写字母</em>: <code>^([A-Z])*$</code></li><li><em>URL</em>: <code>^(((http|https|ftp):\\/\\/)?([[a-zA-Z0-9]\\-\\.])+(\\.)([[a-zA-Z0-9]]){2,4}([[a-zA-Z0-9]\\/+=%&amp;_\\.~?\\-]*))*$</code></li><li><em>VISA 信用卡号</em>: <code>^(4[0-9]{12}(?:[0-9]{3})?)*$</code></li><li><em>日期 (MM/DD/YYYY)</em>: <code>^(0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])[- /.](19|20)?[0-9]{2}$</code></li><li><em>日期 (YYYY/MM/DD)</em>: <code>^(19|20)?[0-9]{2}[- /.](0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])$</code></li><li><em>MasterCard 信用卡号</em>: <code>^(5[1-5][0-9]{14})*$</code></li></ul>`,108),f={href:"https://github.com/thinkyoung/learn_regex/edit/master/README.md",target:"_blank",rel:"noopener noreferrer"};function _(x,m){const r=d("router-link"),n=d("ExternalLinkIcon");return h(),s("div",null,[i,e("nav",p,[e("ul",null,[e("li",null,[o(r,{to:"#_1-基本匹配"},{default:a(()=>[t("1. 基本匹配")]),_:1})]),e("li",null,[o(r,{to:"#_2-元字符"},{default:a(()=>[t("2. 元字符")]),_:1})]),e("li",null,[o(r,{to:"#_2-1-点运算符"},{default:a(()=>[t("2.1 点运算符 .")]),_:1})]),e("li",null,[o(r,{to:"#_2-2-字符集"},{default:a(()=>[t("2.2 字符集")]),_:1}),e("ul",null,[e("li",null,[o(r,{to:"#_2-2-1-否定字符集"},{default:a(()=>[t("2.2.1 否定字符集")]),_:1})])])]),e("li",null,[o(r,{to:"#_2-3-重复次数"},{default:a(()=>[t("2.3 重复次数")]),_:1}),e("ul",null,[e("li",null,[o(r,{to:"#_2-3-1-号"},{default:a(()=>[t("2.3.1 * 号")]),_:1})]),e("li",null,[o(r,{to:"#_2-3-2-号"},{default:a(()=>[t("2.3.2 + 号")]),_:1})]),e("li",null,[o(r,{to:"#_2-3-3-号"},{default:a(()=>[t("2.3.3 ? 号")]),_:1})])])]),e("li",null,[o(r,{to:"#_2-4-号"},{default:a(()=>[t("2.4 {} 号")]),_:1})]),e("li",null,[o(r,{to:"#_2-5-特征标群"},{default:a(()=>[t("2.5 (...) 特征标群")]),_:1})]),e("li",null,[o(r,{to:"#_2-6-或运算符"},{default:a(()=>[t("2.6 | 或运算符")]),_:1})]),e("li",null,[o(r,{to:"#_2-7-转码特殊字符"},{default:a(()=>[t("2.7 转码特殊字符")]),_:1})]),e("li",null,[o(r,{to:"#_2-8-锚点"},{default:a(()=>[t("2.8 锚点")]),_:1}),e("ul",null,[e("li",null,[o(r,{to:"#_2-8-1-号"},{default:a(()=>[t("2.8.1 ^ 号")]),_:1})]),e("li",null,[o(r,{to:"#_2-8-2-号"},{default:a(()=>[t("2.8.2 $ 号")]),_:1})])])]),e("li",null,[o(r,{to:"#_3-简写字符集"},{default:a(()=>[t("3. 简写字符集")]),_:1})]),e("li",null,[o(r,{to:"#_4-前后关联约束-前后预查"},{default:a(()=>[t("4. 前后关联约束(前后预查)")]),_:1}),e("ul",null,[e("li",null,[o(r,{to:"#_4-1-前置约束-存在"},{default:a(()=>[t("4.1 ?=... 前置约束(存在)")]),_:1})]),e("li",null,[o(r,{to:"#_4-2-前置约束-排除"},{default:a(()=>[t("4.2 ?!... 前置约束-排除")]),_:1})]),e("li",null,[o(r,{to:"#_4-3-后置约束-存在"},{default:a(()=>[t("4.3 ?<= ... 后置约束-存在")]),_:1})]),e("li",null,[o(r,{to:"#_4-4-后置约束-排除"},{default:a(()=>[t("4.4 ?<!... 后置约束-排除")]),_:1})])])]),e("li",null,[o(r,{to:"#_5-标志"},{default:a(()=>[t("5. 标志")]),_:1}),e("ul",null,[e("li",null,[o(r,{to:"#_5-1-忽略大小写-case-insensitive"},{default:a(()=>[t("5.1 忽略大小写 (Case Insensitive)")]),_:1})]),e("li",null,[o(r,{to:"#_5-2-全局搜索-global-search"},{default:a(()=>[t("5.2 全局搜索 (Global search)")]),_:1})]),e("li",null,[o(r,{to:"#_5-3-多行修饰符-multiline"},{default:a(()=>[t("5.3 多行修饰符 (Multiline)")]),_:1})])])]),e("li",null,[o(r,{to:"#额外补充"},{default:a(()=>[t("额外补充")]),_:1})])])]),u,e("p",null,[t("转载自"),e("a",f,[t("正则表达式学习手册中文版"),o(n)])])])}const q=l(g,[["render",_],["__file","regex.html.vue"]]);export{q as default};
