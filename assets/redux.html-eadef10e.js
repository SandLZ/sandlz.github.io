import{_ as n,p as s,q as a,a1 as t}from"./framework-201fec1f.js";const e={},o=t(`<h1 id="redux" tabindex="-1"><a class="header-anchor" href="#redux" aria-hidden="true">#</a> redux</h1><p><strong>工作流程</strong></p><div><img src="https://github.com/sandlz/images/raw/master/uPic/redux.jpg" alt="redux"></div><div><img src="https://github.com/sandlz/images/raw/master/uPic/react_redux.svg" alt="react-redux"></div><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念" aria-hidden="true">#</a> 核心概念</h2><h3 id="action" tabindex="-1"><a class="header-anchor" href="#action" aria-hidden="true">#</a> <strong>Action</strong></h3><p><strong>Action</strong> 是把数据从应用 传到 <code>store</code> 的有效载荷。它是 <code>store</code> 数据的唯一来源。一般来说你会通过 <code>store.dispatch()</code> 将 <code>action</code> 传到 <code>store</code>。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// actionType.js</span>
<span class="token keyword">const</span> <span class="token constant">ADD_TODO</span> <span class="token operator">=</span> <span class="token string">&#39;ADD_TODO&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// action.js</span>
<span class="token keyword">const</span> <span class="token function-variable function">addTodo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">ADD_TODO</span><span class="token punctuation">,</span>
        text
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="分发action" tabindex="-1"><a class="header-anchor" href="#分发action" aria-hidden="true">#</a> 分发<code>Action</code></h4><ul><li><code>store</code> 里能直接通过 <code>store.dispatch()</code> 调用 <code>dispatch()</code> 方法.</li><li><code>react-redux</code> 提供的 <code>connect()</code> 帮助器来调用。</li><li><code>bindActionCreators()</code> 可以自动把多个 <code>action</code> 创建函数 绑定到 <code>dispatch()</code> 方法上。</li></ul><h3 id="reducer" tabindex="-1"><a class="header-anchor" href="#reducer" aria-hidden="true">#</a> <strong>Reducer</strong></h3><p><strong>Reducers</strong> 指定了应用状态的变化如何响应 <code>actions</code> 并发送到 <code>store</code> 的，记住 <code>actions</code> 只是描述了有事情发生了这一事实，并没有描述应用如何更新 <code>state</code>。</p><h4 id="设计state结构" tabindex="-1"><a class="header-anchor" href="#设计state结构" aria-hidden="true">#</a> 设计<code>State</code>结构</h4><p>在 Redux 应用中，所有的 state 都被保存在一个单一对象中。建议在写代码前先想一下这个对象的结构。如何才能以最简的形式把应用的 state 用对象描述出来？</p><p>以 todo 应用为例，需要保存两种不同的数据：</p><p>当前选中的任务过滤条件； 完整的任务列表。 通常，这个 state 树还需要存放其它一些数据，以及一些 UI 相关的 state。这样做没问题，但尽量把这些数据与 UI 相关的 state 分开。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  visibilityFilter<span class="token operator">:</span> &#39;SHOW_ALL&#39;<span class="token punctuation">,</span>
  todos<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      text<span class="token operator">:</span> &#39;Consider using Redux&#39;<span class="token punctuation">,</span>
      completed<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      text<span class="token operator">:</span> &#39;Keep all state in a single tree&#39;<span class="token punctuation">,</span>
      completed<span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>处理 Reducer 关系时的注意事项 开发复杂的应用时，不可避免会有一些数据相互引用。建议你尽可能地把 state 范式化，不存在嵌套。</p><p>把所有数据放到一个对象里，每个数据以 ID 为主键，不同实体或列表间通过 ID 相互引用数据。把应用的 state 想像成数据库。这种方法在 normalizr 文档里有详细阐述。</p><p>例如，实际开发中，在 state 里同时存放 <code>todosById: { id -&gt; todo } 和 todos: array&lt;id&gt;</code> 是比较好的方式，本文中为了保持示例简单没有这样处理。</p></div><h4 id="action-处理" tabindex="-1"><a class="header-anchor" href="#action-处理" aria-hidden="true">#</a> <strong>Action</strong> 处理</h4><p><code>reducer</code> 就是一个纯函数，接收旧的 <code>state</code> 和 <code>action</code>，返回新的 <code>state</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token parameter">previousState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> newState
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>保持 reducer 纯净非常重要。<strong>永远不要</strong>在 reducer 里做这些操作：</p><ul><li>修改传入参数，如<code>state</code>、<code>action</code>载荷</li><li>执行有<strong>副作用</strong>的操作，如 API 请求和路由跳转</li><li>调用非纯函数，如 <code>Date.now()</code> 或 <code>Math.random()</code></li></ul></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 初始化state</span>
<span class="token comment">// 2. 处理默认情况</span>
<span class="token comment">// 3. 充分利用ES6+语法</span>
<span class="token keyword">const</span> <span class="token function-variable function">todos</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">ADD_TODO</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
          <span class="token literal-property property">id</span><span class="token operator">:</span> action<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
          <span class="token literal-property property">text</span><span class="token operator">:</span> action<span class="token punctuation">.</span>text<span class="token punctuation">,</span>
          <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token operator">...</span>state<span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="合成reducer" tabindex="-1"><a class="header-anchor" href="#合成reducer" aria-hidden="true">#</a> 合成<code>Reducer</code></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> todoApp <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    todos<span class="token punctuation">,</span>
    visibilityFilter
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> todoApp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>combineReducers()</code> 所做的只是生成一个函数，这个函数来调用你的一系列 <code>reducer</code>，每个 <code>reducer</code> 根据它们的 <code>key</code> 来筛选出 <code>state</code> 中的一部分数据并处理，然后这个生成的函数再将所有 <code>reducer</code> 的结果合并成一个大的对象。没有任何魔法。正如其他 <code>reducers</code>，如果 <code>combineReducers()</code> 中包含的所有 <code>reducers</code> 都没有更改 <code>state</code>，那么也就不会创建一个新的对象。</p><h3 id="store" tabindex="-1"><a class="header-anchor" href="#store" aria-hidden="true">#</a> <strong>Store</strong></h3><p><strong>Store</strong> 就是把 <code>Action</code> 和 <code>Reducer</code> 联系到一起的对象。</p><p><code>Store</code> 有以下职责：</p><ul><li>维持应用的 state；</li><li>提供 getState() 方法获取 state；</li><li>提供 dispatch(action) 方法更新 state；</li><li>通过 subscribe(listener) 注册监听器;</li><li>通过 subscribe(listener) 返回的函数注销监听器。</li></ul><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>再次强调一下 Redux 应用<strong>只有一个单一的 store</strong>。当需要拆分数据处理逻辑时，你应该使用 reducer 组合 而不是创建多个 store。</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span>
<span class="token keyword">import</span> todoApp <span class="token keyword">from</span> <span class="token string">&#39;./reducers&#39;</span>
<span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>todoApp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>createStore()</code> 的第二个参数是可选的, 用于设置 state 初始状态。这对开发同构应用时非常有用，服务器端 redux 应用的 state 结构可以与客户端保持一致, 那么客户端可以将从网络接收到的服务端 state 直接用于本地数据初始化。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>todoApp<span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token constant">STATE_FROM_SERVER</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="三大原则" tabindex="-1"><a class="header-anchor" href="#三大原则" aria-hidden="true">#</a> 三大原则</h2><h3 id="_1-单一数据源" tabindex="-1"><a class="header-anchor" href="#_1-单一数据源" aria-hidden="true">#</a> 1. 单一数据源</h3><p>整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。</p><h3 id="_2-state-是只读的" tabindex="-1"><a class="header-anchor" href="#_2-state-是只读的" aria-hidden="true">#</a> 2. State 是只读的</h3><p>唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。</p><h3 id="_3-使用纯函数来执行修改" tabindex="-1"><a class="header-anchor" href="#_3-使用纯函数来执行修改" aria-hidden="true">#</a> 3. 使用纯函数来执行修改</h3><p>为了描述 action 如何改变 state tree ，你需要编写 reducers。</p><h2 id="react-redux" tabindex="-1"><a class="header-anchor" href="#react-redux" aria-hidden="true">#</a> react-redux</h2><blockquote><p>Redux 和 React 之间没有关系。Redux 支持 React、Angular、Ember、jQuery 甚至纯 JavaScript。</p></blockquote><p><code>react-redux</code> 允许你以 <code>state</code> 函数的形式来描述界面，<code>Redux</code> 通过 <code>action</code> 的形式来发起 <code>state</code> 变化。</p><p><code>react-redux</code> 绑定库是基于 <strong>容器组件</strong> 和 <strong>展示组件</strong> 相分离 的开发思想.</p><table><thead><tr><th style="text-align:right;"></th><th style="text-align:left;">展示组件</th><th style="text-align:left;">容器组件</th></tr></thead><tbody><tr><td style="text-align:right;">作用</td><td style="text-align:left;">描述如何展现（骨架、样式）</td><td style="text-align:left;">描述如何运行（数据获取、状态更新）</td></tr><tr><td style="text-align:right;">直接使用 Redux</td><td style="text-align:left;">否</td><td style="text-align:left;">是</td></tr><tr><td style="text-align:right;">数据来源</td><td style="text-align:left;">props</td><td style="text-align:left;">监听 Redux state</td></tr><tr><td style="text-align:right;">数据修改</td><td style="text-align:left;">从 props 调用回调函数</td><td style="text-align:left;">向 Redux 派发 actions</td></tr><tr><td style="text-align:right;">调用方式</td><td style="text-align:left;">手动</td><td style="text-align:left;">通常由 React Redux 生成</td></tr></tbody></table><p><strong>容器组件</strong> 用于接管 “状态”，<strong>展示组件</strong> 用于渲染界面，其中 “展示组件” 也是 React 诞生的初心，专注于高效的编写用户界面。</p><h3 id="展示组件" tabindex="-1"><a class="header-anchor" href="#展示组件" aria-hidden="true">#</a> 展示组件</h3><p>React 引入 redux 后，应用中只有单一的 state 树，react 的每个组件都可以抛弃 state 的相关逻辑，改为从 props 获取，包括要执行的一些用户事件行为。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Todo <span class="token keyword">from</span> <span class="token string">&quot;./Todo&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">TodoList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> todos<span class="token punctuation">,</span> toggleTodo <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
    <span class="token punctuation">{</span>todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>Todo key<span class="token operator">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>todo<span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">toggleTodo</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> TodoList<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="容器组件" tabindex="-1"><a class="header-anchor" href="#容器组件" aria-hidden="true">#</a> 容器组件</h3><p>容器组件实现了将展示组件和 redux 关联在一起。 技术上讲，容器组件就是使用 store.subscribe() 从 Redux state 树中读取部分数据，并通过 props 来把这些数据提供给要渲染的组件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-redux&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> toggleTodo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../actions&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> TodoList <span class="token keyword">from</span> <span class="token string">&quot;../components/TodoList&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> VisibilityFilters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../actions&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">getVisibleTodos</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">todos<span class="token punctuation">,</span> filter</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>filter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> VisibilityFilters<span class="token punctuation">.</span><span class="token constant">SHOW_ALL</span><span class="token operator">:</span>
      <span class="token keyword">return</span> todos<span class="token punctuation">;</span>
    <span class="token keyword">case</span> VisibilityFilters<span class="token punctuation">.</span><span class="token constant">SHOW_COMPLETED</span><span class="token operator">:</span>
      <span class="token keyword">return</span> todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>completed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> VisibilityFilters<span class="token punctuation">.</span><span class="token constant">SHOW_ACTIVE</span><span class="token operator">:</span>
      <span class="token keyword">return</span> todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span>completed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown filter: &quot;</span> <span class="token operator">+</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 简写方式 省略return</span>
<span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token function">getVisibleTodos</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">,</span> state<span class="token punctuation">.</span>visibilityFilter<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 简写方式 省略return</span>
<span class="token keyword">const</span> <span class="token function-variable function">mapDispatchToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dispatch</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">toggleTodo</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">toggleTodo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>TodoList<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mapstatetoprops-函数" tabindex="-1"><a class="header-anchor" href="#mapstatetoprops-函数" aria-hidden="true">#</a> mapStateToProps 函数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> ownProps</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// ... computed data from state and optionally ownProps</span>
   <span class="token punctuation">{</span>
      <span class="token literal-property property">a</span><span class="token operator">:</span> state<span class="token punctuation">.</span>xx<span class="token punctuation">,</span>
      <span class="token literal-property property">b</span><span class="token operator">:</span> state<span class="token punctuation">.</span>yy
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>传入的 state 是应用中唯一的状态树，我们从相应组件的 reducer 中读取 state，分别映射到一个自定义属性中，这样就可以在展示组件中直接调用对应属性（props）了。 <code>mapStateToProps</code>会订阅 Store，每当 state 更新的时候，就会自动执行，重新计算 UI 组件的参数，从而触发 UI 组件的重新渲染。</p><h3 id="mapdispatchtoprops-函数" tabindex="-1"><a class="header-anchor" href="#mapdispatchtoprops-函数" aria-hidden="true">#</a> mapDispatchToProps 函数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">mapDispatchToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dispatch<span class="token punctuation">,</span> ownProps</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">someFunc</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">someAction</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如我们想dispatch一个<code>toggleTodo</code>的action，通过这个方法映射之后，就可以直接这样写：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// TodoList展示組件</span>
<span class="token comment">// toggleTodo是方法名</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">toggleTodo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="connect-函数" tabindex="-1"><a class="header-anchor" href="#connect-函数" aria-hidden="true">#</a> connect 函数</h3><p>上面2个方法实现了 <code>state</code> 和 <code>action</code> 到props的映射，我们还需要把这2个函数连接在一起，并且要关联到一个具体的展示组件，这样就可以在展示组件中使用这种映射关系了。示例代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> VisibilityTodoList <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>TodoList<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="provide-传入store" tabindex="-1"><a class="header-anchor" href="#provide-传入store" aria-hidden="true">#</a> Provide(传入<code>store</code>)</h3><p><code>react-redux</code>提供一个叫provider的组件，他可以让所有组件都可以访问到store（他的实现原理实际上是利用了react的context功能），而不必显示的一层层传递了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Container<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Container<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.main-wrap&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="高级" tabindex="-1"><a class="header-anchor" href="#高级" aria-hidden="true">#</a> 高级</h2><h3 id="异步-action" tabindex="-1"><a class="header-anchor" href="#异步-action" aria-hidden="true">#</a> 异步 <code>Action</code></h3><p>当调用异步 API 时，有两个非常关键的时刻：发起请求的时刻，和接收到响应的时刻（也可能是超时）。</p><p>这两个时刻都可能会更改应用的 <code>state</code>；为此，你需要 <code>dispatch</code> 普通的同步 <code>action</code>。一般情况下，每个 API 请求都需要 <code>dispatch</code> 至少三种 <code>action</code>：</p><ul><li><strong>一种通知 reducer 请求开始的 action</strong></li></ul><p>对于这种 action，reducer 可能会切换一下 state 中的 isFetching 标记。以此来告诉 UI 来显示加载界面。</p><ul><li><strong>一种通知 reducer 请求成功的 action</strong></li></ul><p>对于这种 action，reducer 可能会把接收到的新数据合并到 state 中，并重置 isFetching。UI 则会隐藏加载界面，并显示接收到的数据。</p><ul><li><strong>一种通知 reducer 请求失败的 action</strong></li></ul><p>对于这种 action，reducer 可能会重置 isFetching。另外，有些 reducer 会保存这些失败信息，并在 UI 里显示出来。</p><h4 id="异步-action-创建函数" tabindex="-1"><a class="header-anchor" href="#异步-action-创建函数" aria-hidden="true">#</a> 异步 action 创建函数</h4><p>我们有了异步操作，比如我们会先执行一个ajax调用之后再去更改状态的话，这个异步动作，没有地方放了, 考虑以下几点：</p><ol><li>不能把异步动作放到组件中，因为UI组件只负责使用数据，如果有其他的异步代码，让UI组件组件不纯粹</li><li>理论上来说放到 <code>actionCreator</code> 的方法中最合适，但是,因为 <code>actionCreator</code> 目前只是专注于创建 <code>action</code> 和返回 <code>action</code>，无法放入异步操作</li></ol><p>所以，我们需要用到 <code>redux</code> 的中间件工具：<strong><code>redux-thunk</code></strong>、<code>redux-promise</code>、<code>redux-saga</code>…</p><p>引入 <code>redux-thunk</code></p><p>当 action 创建函数返回函数时，这个函数会被 <code>Redux Thunk middleware</code> 执行。这个函数并不需要保持纯净；它还可以带有副作用，包括执行异步 API 请求。这个函数还可以 dispatch action，就像 dispatch 前面定义的同步 action 一样。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// someAction.js</span>
<span class="token comment">// 虽然内部操作不同，你可以像其它 action 创建函数 一样使用它：</span>
<span class="token comment">// store.dispatch(fetchPosts(&#39;reactjs&#39;))</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fetchPosts</span><span class="token punctuation">(</span><span class="token parameter">subreddit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token comment">// Thunk middleware 知道如何处理函数。</span>
  <span class="token comment">// 这里把 dispatch 方法通过参数的形式传给函数，</span>
  <span class="token comment">// 以此来让它自己也能 dispatch action。</span>

  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dispatch</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 首次 dispatch：更新应用的 state 来通知</span>
    <span class="token comment">// API 请求发起了。</span>

    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">requestPosts</span><span class="token punctuation">(</span>subreddit<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// thunk middleware 调用的函数可以有返回值，</span>
    <span class="token comment">// 它会被当作 dispatch 方法的返回值传递。</span>

    <span class="token comment">// 这个案例中，我们返回一个等待处理的 promise。</span>
    <span class="token comment">// 这并不是 redux middleware 所必须的，但这对于我们而言很方便。</span>

    <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://www.subreddit.com/r/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>subreddit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
        <span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">// 不要使用 catch，因为会捕获</span>
        <span class="token comment">// 在 dispatch 和渲染中出现的任何错误，</span>
        <span class="token comment">// 导致 &#39;Unexpected batch number&#39; 错误。</span>
        <span class="token comment">// https://github.com/facebook/react/issues/6895</span>
         <span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;An error occurred.&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">json</span> <span class="token operator">=&gt;</span>
        <span class="token comment">// 可以多次 dispatch！</span>
        <span class="token comment">// 这里，使用 API 请求结果来更新应用的 state。</span>

        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">receivePosts</span><span class="token punctuation">(</span>subreddit<span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="异步-数据流" tabindex="-1"><a class="header-anchor" href="#异步-数据流" aria-hidden="true">#</a> 异步 数据流</h3><h3 id="middleware" tabindex="-1"><a class="header-anchor" href="#middleware" aria-hidden="true">#</a> Middleware</h3><blockquote><p>如果你使用过 <code>Express</code> 或者 <code>Koa</code> 等服务端框架, 那么应该对 <code>middleware</code> 的概念不会陌生。 在这类框架中，<code>middleware</code> 是指可以被嵌入在框架接收请求到产生响应过程之中的代码。例如，<code>Express</code> 或者 <code>Koa</code> 的 <code>middleware</code> 可以完成添加 <code>CORS headers</code>、记录日志、内容压缩等工作。</p></blockquote><p><code>middleware</code> 最优秀的特性就是可以被链式组合。你可以在一个项目中使用多个独立的第三方 <code>middleware</code>。</p><p>常用中间件：</p><ul><li><a href="./redux-thunk">redux-thunk</a></li><li><a href="./redux-persist">redux-persist</a></li><li><a href="./redux-logger">redux-logger</a></li></ul>`,91),p=[o];function c(i,l){return s(),a("div",null,p)}const d=n(e,[["render",c],["__file","redux.html.vue"]]);export{d as default};
