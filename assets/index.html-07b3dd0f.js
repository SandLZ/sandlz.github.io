import{_ as e,p as a,q as c,a1 as d}from"./framework-201fec1f.js";const o={},t=d('<h1 id="angular" tabindex="-1"><a class="header-anchor" href="#angular" aria-hidden="true">#</a> Angular</h1><h2 id="脏检测" tabindex="-1"><a class="header-anchor" href="#脏检测" aria-hidden="true">#</a> 脏检测</h2><h3 id="脏检测的范围" tabindex="-1"><a class="header-anchor" href="#脏检测的范围" aria-hidden="true">#</a> 脏检测的范围</h3><p>angular 会对所有绑定到 UI 上的表达式做脏检查。其实，在 angular 实现内部，所有绑定表达式都被转换为 <code>$scope.$watch()</code>。每个 <code>$watch</code> 记录了上一次表达式的值。有 <code>ng-bind=&quot;a&quot;</code> 即有 <code>$scope.$watch(&#39;a&#39;, callback)</code>，而 <code>$scope.$watch</code> 可不会管被 watch的表达式是否跟触发脏检查的事件有关.</p><h3 id="监控对象属性-watch和-digest" tabindex="-1"><a class="header-anchor" href="#监控对象属性-watch和-digest" aria-hidden="true">#</a> 监控对象属性：<code>$watch</code>和 <code>$digest</code></h3><p><code>$watch</code> 和 <code>$digest</code> 是相辅相成的。两者一起，构成了Angular作用域的核心：<strong>数据变化的响应</strong>。</p><h3 id="angular-的数据绑定采用什么机制-详述原理" tabindex="-1"><a class="header-anchor" href="#angular-的数据绑定采用什么机制-详述原理" aria-hidden="true">#</a> angular 的数据绑定采用什么机制？详述原理</h3><p>脏检查机制</p><p><strong>双向数据绑定</strong>是 AngularJS 的核心机制之一。当 view 中有任何数据变化时，会更新到 model ，当 model 中数据有变化时，view 也会同步更新，显然，这需要一个监控。</p><p>原理就是，Angular 在 scope 模型上设置了一个监听队列，用来监听数据变化并更新 view 。每次绑定一个东西到 view 上时 AngularJS 就会往 $watch 队列里插入一条 <code>$watch</code> ，用来检测它监视的 model 里是否有变化的东西。当浏览器接收到可以被 <code>angular context</code> 处理的事件时， <code>$digest</code> 循环就会触发，遍历所有的 <code>$watch</code> ，最后更新 dom。</p>',10),r=[t];function n(h,i){return a(),c("div",null,r)}const l=e(o,[["render",n],["__file","index.html.vue"]]);export{l as default};
