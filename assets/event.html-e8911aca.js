import{_ as p,M as o,p as c,q as i,R as n,N as t,U as e,t as s,a1 as l}from"./framework-201fec1f.js";const u={},d=n("h1",{id:"事件传播",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#事件传播","aria-hidden":"true"},"#"),s(" 事件传播")],-1),r={class:"table-of-contents"},k=l(`<p>JS 与 HTML 的交互是用事件实现的。事件流描述了页面接收事件的顺序。</p><div><img src="https://github.com/sandlz/images/raw/master/uPic/o2kxpY.png"></div><p><code>DOM2 Events</code> 规范规定事件流分为 3 个阶段: 事件捕获、到达目标 和 事件冒泡。</p><p>事件捕获最先发生，为提前拦截事件提供了可能。然后，实际的目标元素接收到事件。</p><p>最后一个阶段是冒泡，最迟要在这个阶段响应事件。</p><p>所有现在浏览器都支持 DOM 事件流，只有 IE8 以及更早的浏览器不支持。</p><h2 id="事件处理程序" tabindex="-1"><a class="header-anchor" href="#事件处理程序" aria-hidden="true">#</a> 事件处理程序</h2><h3 id="dom0-事件处理程序" tabindex="-1"><a class="header-anchor" href="#dom0-事件处理程序" aria-hidden="true">#</a> <code>DOM0</code> 事件处理程序</h3><p>在 JavaScript 中创建事件监听器的传统方式是把一个函数赋值给 DOM 元素。兼容性最好，所有的浏览器都支持此方法。</p><p>每个元素（包括 window 和 document）都有事件处理程序的属性（一般都 onxxxx），这个属性的值为一个函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myBtn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Clicked&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样使用 <code>DOM0</code> 事件处理是发生在程序赋值时注册在事件流的<strong>冒泡阶段</strong>的。</p><p>注意点：</p><ol><li><p>将事件处理程序属性设置为 <code>null</code>，即可移除通过 <code>DOM0</code> 方式添加的事件处理程序。</p></li><li><p>如果有多个 <code>DOM0</code> 事件处理程序的话，后面的是会把前面的给覆盖掉。只有执行最后一个调用的结果。</p></li></ol><h3 id="dom2-事件处理程序" tabindex="-1"><a class="header-anchor" href="#dom2-事件处理程序" aria-hidden="true">#</a> <code>DOM2</code> 事件处理程序</h3><p>我们也可以通过在所有的 DOM 节点上通过 <code>addEventListener()</code> 和 <code>removeEventLinstener()</code> 来添加和移除事件处理程序。</p><p><code>addEventListener()</code> 和 <code>removeEventLinstener()</code> 接收 3 个参数：事件名、事件处理函数 和 一个 option 对象或一个布尔值 <code>useCapture（true)</code>  表示在<strong>捕获阶段</strong>调用事件处理程序， <code>false （默认值）</code>表示在<strong>冒泡阶段</strong>调用事件处理程序.</p><p>因为跨浏览器兼容性好，所以事件处理程序默认会被添加到事件流的冒泡阶段（也就是默认最后一个参数为 false ））。</p><p><code>addEventListener(type, listener, useCapture | options)</code></p><p><code>option</code> 参数有一下几个选择:</p><ul><li><code>capture</code>: Boolean，表示 listener 会在该类型的事件捕获阶段传播到该 EventTarget 时触发。</li><li><code>once</code>: Boolean，表示 listener 在添加之后最多只调用一次。如果是 true， listener 会在其被调用之后自动移除。</li><li><code>passive</code>: Boolean，设置为 true 时，表示 listener 永远不会调用 preventDefault()。如果 listener 仍然调用了这个函数，客户端将会忽略它并抛出一个控制台警告。</li></ul><p><code>useCapture</code> 参数如下:</p><p>Boolean，在 DOM 树中，注册了 listener 的元素， 是否要先于它下面的 EventTarget，调用该 listener。 当 useCapture(设为 true) 时，沿着 DOM 树向上冒泡的事件，不会触发 listener。当一个元素嵌套了另一个元素，并且两个元素都对同一事件注册了一个处理函数时，所发生的事件冒泡和事件捕获是两种不同的事件传播方式。事件传播模式决定了元素以哪个顺序接收事件。进一步的解释可以查看 事件流 及 JavaScript Event order 文档。 如果没有指定， useCapture 默认为 false 。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>useCapture</code> 参数指定了该事件处理程序触发的“时机” ：是在事件流的捕获阶段还是冒泡阶段。但是，无论最后一个参数设置为什么，都不会阻碍事件流的传播。</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;btn click capture &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">true</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;btn click bubble &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;body click capture&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">true</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;body click bubble&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// body click capture</span>
<span class="token comment">// btn click capture</span>
<span class="token comment">// btn click bubble</span>
<span class="token comment">// body click bubble</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>useCapture</code>（ option 中的 capture 也是一样）只是<strong>控制该事件处理程序是添加在事件流的捕获阶段还是冒泡阶段，对事件的传播是没有影响的！</strong></p><p><code>DOM2</code> 事件处理程序的一个优点是可以给一个元素添加多个事件处理程序，并按添加的顺序触发。 使用 <code>addEventListener()</code> 添加的事件处理程序只能使用 <code>removeEventLinstener()</code>移除（三个参数均一致才可以）；所以，使用匿名函数添加的事件处理程序是不能被移除的。</p><h2 id="dom事件对象-event" tabindex="-1"><a class="header-anchor" href="#dom事件对象-event" aria-hidden="true">#</a> DOM事件对象 event</h2><p>在 DOM 中发生事件时，所有的相关信息都会被收集在一个名为 <code>event</code> 的对象中。这个对象包含了一些基本信息：触发事件的元素、事件的类型、以及一些与特定事件相关的其他数据（比如和鼠标事件相关的鼠标的位置信息）所有的浏览器都是支持这个 <code>event</code> 对象的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>type<span class="token punctuation">)</span>     <span class="token comment">// click</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在事件处理函数的内部，<code>this</code> 对象始终等于 <code>currentTarget</code> (因为 this 是指向调用的对象的)。</p><p><code>target</code> 是事件触发的实际目标。（事件冒泡阶段可能出现 <code>target</code> 和 <code>currentTarget</code> 不相等的情况。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;div click&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>currentTarget <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// true </span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;div click&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// true</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">var</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;body click&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>currentTarget <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;body click&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// false</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="preventdefault" tabindex="-1"><a class="header-anchor" href="#preventdefault" aria-hidden="true">#</a> <code>preventDefault()</code></h3><p><code>preventDefault()</code> 方法用于阻止事件的默认行为（比如，a 标签有跳转到 href 链接的默认行为，使用 preventDefault() 可以阻止这种导航行为）</p><p>**<code>preventDefault()</code>阻止的必需是可 <code>cancelable</code> 的元素 **</p><h3 id="stoppropagation" tabindex="-1"><a class="header-anchor" href="#stoppropagation" aria-hidden="true">#</a> <code>stopPropagation()</code></h3><p><code>stopPropagation()</code> 方法用于立即阻止事件流在 DOM 中的传播，取消后续的事件捕获或冒泡。比如</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;clicked&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;body clicked&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// clicked </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不调用 <code>stopPropagation()</code> 那么点击 div 会有两个 log 记录。如果加上的话，click 事件就不会传播到 body 上，只会有一个 log 记录（ clicked ）。 但是需要注意的是，不是所有的事件都会冒泡！比如某些 <code>scroll</code> 事件就是不会冒泡的。</p>`,40);function v(m,b){const a=o("router-link");return c(),i("div",null,[d,n("nav",r,[n("ul",null,[n("li",null,[t(a,{to:"#事件处理程序"},{default:e(()=>[s("事件处理程序")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#dom0-事件处理程序"},{default:e(()=>[s("DOM0 事件处理程序")]),_:1})]),n("li",null,[t(a,{to:"#dom2-事件处理程序"},{default:e(()=>[s("DOM2 事件处理程序")]),_:1})])])]),n("li",null,[t(a,{to:"#dom事件对象-event"},{default:e(()=>[s("DOM事件对象 event")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#preventdefault"},{default:e(()=>[s("preventDefault()")]),_:1})]),n("li",null,[t(a,{to:"#stoppropagation"},{default:e(()=>[s("stopPropagation()")]),_:1})])])])])]),k])}const f=p(u,[["render",v],["__file","event.html.vue"]]);export{f as default};
