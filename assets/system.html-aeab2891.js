import{_ as e,p as s,q as n,a1 as a}from"./framework-201fec1f.js";const t={},l=a(`<h1 id="系统" tabindex="-1"><a class="header-anchor" href="#系统" aria-hidden="true">#</a> 系统</h1><h2 id="系统目录" tabindex="-1"><a class="header-anchor" href="#系统目录" aria-hidden="true">#</a> 系统目录</h2><table><thead><tr><th style="text-align:center;">目录</th><th style="text-align:left;">内容</th></tr></thead><tbody><tr><td style="text-align:center;"><code>/bin</code></td><td style="text-align:left;">系统有很多放置可执行文件的目录，但<code>/bin</code> 比较特殊。因为<code>/bin</code> 放置的是在 单人维护模式下还能够被操作的指令。 在<code>/bin</code> 下面的指令可以被 root 与一般 帐号所使用，主要有:cat, chmod, chown, date, mv, mkdir, cp, bash 等等常用的指令。</td></tr><tr><td style="text-align:center;"><code>/boot</code></td><td style="text-align:left;">这个目录主要在放置开机会使用到的文件，包括 Linux 核心文件以及开机菜 单与开机所需配置文件等等。 Linux kernel 常用的文件名为:vmlinuz，如果 使用的是 grub2 这个开机管理程序， 则还会存在<code>/boot/grub2/</code>这个目录喔!</td></tr><tr><td style="text-align:center;"><code>/dev</code></td><td style="text-align:left;">在 Linux 系统上，任何设备与周边设备都是以文件的型态存在于这个目录当 中的。 你只要通过存取这个目录下面的某个文件，就等于存取某个设备啰 ~ 比要重要的文件有<code>/dev/null</code>, <code>/dev/zero</code>, <code>/dev/tty</code>, <code>/dev/loop</code>, <code>/dev/sd</code> 等等</td></tr><tr><td style="text-align:center;"><code>/etc</code></td><td style="text-align:left;">系统主要的配置文件几乎都放置在这个目录内，例如人员的帐号密码档、 各种服务的启始档等等。一般来说，这个目录下的各文件属性是可以让一般 使用者查阅的， 但是只有 root 有权力修改。FHS 建议不要放置可可执行文件 (binary)在这个目录中喔。比较重要的文件有: <code>/etc/modprobe.d/</code>, <code>/etc/passwd</code>, <code>/etc/fstab</code>, <code>/etc/issue</code> 等等。另外 FHS 还规范几个重要的目录 最好要存在 <code>/etc/</code> 目录下喔:<code>/etc/opt</code>(必要):这个目录在放置第三方协力 软件 <code>/opt</code> 的相关配置文件 <code>/etc/X11/</code>(建议):与 X Window 有关的各种配 置文件都在这里，尤其是 xorg.conf 这个 X Server 的配置文件。 /etc/sgml/ (建议):与 SGML 格式有关的各项配置文件 /etc/xml/(建议):与 XML 格式有关的各项配置文件</td></tr><tr><td style="text-align:center;"><code>/lib</code></td><td style="text-align:left;">系统的函数库非常的多，而/lib 放置的则是在开机时会用到的函数库， 以及 在/bin 或/sbin 下面的指令会调用的函数库而已。 什么是函数库呢?你可以将 他想成是“外挂”，某些指令必须要有这些“外挂”才能够顺利完成程序的执行 之意。 另外 FSH 还要求下面的目录必须要存在:/lib/modules/:这个目录 主要放置可抽换式的核心相关模块(驱动程序)喔!</td></tr><tr><td style="text-align:center;"><code>/media</code></td><td style="text-align:left;">media 是“媒体”的英文，顾名思义，这个<code>/media</code>下面放置的就是可移除的设备, 包括软盘、光盘、DVD 等等设备都暂时挂载于此。常见的文件名 有:<code>/media/floppy</code>, <code>/media/cdrom</code> 等等。</td></tr><tr><td style="text-align:center;"><code>/mnt</code></td><td style="text-align:left;">如果你想要暂时挂载某些额外的设备，一般建议你可以放置到这个目录中。 在古早时候，这个目录的用途与<code>/media</code> 相同,只是有了<code>/media</code>之后，这个 目录就用来暂时挂载用了。</td></tr><tr><td style="text-align:center;"><code>/opt</code></td><td style="text-align:left;">这个是给第三方协力软件放置的目录。什么是第三方协力软件啊? 举例来 说，KDE 这个桌面管理系统是一个独立的计划，不过他可以安装到 Linux 系 统中，因此 KDE 的软件就建议放置到此目录下了。 另外，如果你想要自行 安装额外的软件(非原本的 distribution 提供的)，那么也能够将你的软件安 装到这里来。 不过，以前的 Linux 系统中，我们还是习惯放置在<code>/usr/local</code> 目录下呢</td></tr><tr><td style="text-align:center;"><code>/run</code></td><td style="text-align:left;">早期的 FHS 规定系统开机后所产生的各项信息应该要放置到 <code>/var/run</code> 目录 下，新版的 FHS 则规范到 <code>/run</code> 下面。 由于 <code>/run</code> 可以使用内存来仿真，因此性能上会好很多!</td></tr><tr><td style="text-align:center;"><code>/sbin</code></td><td style="text-align:left;">Linux 有非常多指令是用来设置系统环境的，这些指令只有 root 才能够利用 来“设置”系统，其他使用者最多只能用来“查询”而已。 放在/sbin 下面的为开 机过程中所需要的，里面包括了开机、修复、还原系统所需要的指令。 至于某些服务器软件程序，一般则放置到<code>/usr/sbin/</code>当中。至于本机自行安装的 软件所产生的系统可执行文件(system binary)， 则放置到<code>/usr/local/sbin/</code> 当中了。常见的指令包括:fdisk, fsck, ifconfig, mkfs 等等。</td></tr><tr><td style="text-align:center;"><code>/srv</code></td><td style="text-align:left;">srv 可以视为“service”的缩写，是一些网络服务启动之后，这些服务所需要 取用的数据目录。 常见的服务例如 WWW, FTP 等等。举例来说，WWW 服 务器需要的网页数据就可以放置在/srv/www/里面。 不过，系统的服务数据 如果尚未要提供给网际网络任何人浏览的话，默认还是建议放置到 <code>/var/lib</code> 下面即可。</td></tr><tr><td style="text-align:center;"><code>/tmp</code></td><td style="text-align:left;">这是让一般使用者或者是正在执行的程序暂时放置文件的地方。 这个目录 是任何人都能够存取的，所以你需要定期的清理一下。当然，重要数据不可 放置在此目录啊! 因为 FHS 甚至建议在开机时，应该要将<code>/tmp</code> 下的数据都删除唷!</td></tr><tr><td style="text-align:center;"><code>/usr</code></td><td style="text-align:left;">Unix Software Resource 的缩写， 也就 是“Unix 操作系统软件资源”所放置的目录，而不是使用者的数据啦!这点要注意。 FHS 建议 所有软件开发者，应该将他们的数据合理的分别放置到这个目录下的次目录，而不要自行创 建该软件自己独立的目录。 FHS</td></tr><tr><td style="text-align:center;"><code>/var</code></td><td style="text-align:left;">二曾 FHS 设置，主要为放置变动性的数据</td></tr><tr><td style="text-align:center;"><code>/home</code></td><td style="text-align:left;">这是系统默认的使用者主文件夹(home directory)。在你新增一个一般使 用者帐号时， 默认的使用者主文件夹都会规范到这里来。比较重要的是， 主文件夹有两种代号喔:~:代表目前这个使用者的主文件夹 ~dmtsai :则 代表 dmtsai 的主文件夹!</td></tr><tr><td style="text-align:center;"><code>/lib&lt;qual&gt;</code></td><td style="text-align:left;">用来存放与 <code>/lib</code> 不同的格式的二进制函数库，例如支持 64 位的 <code>/lib64</code> 函数 库等</td></tr><tr><td style="text-align:center;"><code>/root</code></td><td style="text-align:left;">系统管理员(root)的主文件夹。之所以放在这里，是因为如果进入单人维 护模式而仅挂载根目录时， 该目录就能够拥有 root 的主文件夹，所以我们会 希望 root 的主文件夹与根目录放置在同一个分区中。</td></tr></tbody></table><h3 id="其他目录" tabindex="-1"><a class="header-anchor" href="#其他目录" aria-hidden="true">#</a> 其他目录</h3><table><thead><tr><th style="text-align:center;">目录</th><th style="text-align:left;">文件内容</th></tr></thead><tbody><tr><td style="text-align:center;"><code>/lost+found</code></td><td style="text-align:left;">这个目录是使用标准的 ext2/ext3/ext4 文件系统格式才会产生的一个目录， 目的在于当文件系统发生错误时， 将一些遗失的片段放置到这个目录下。 不过如果使用的是 xfs 文件系统的话，就不会存在这个目录了!</td></tr><tr><td style="text-align:center;"><code>/proc</code></td><td style="text-align:left;">这个目录本身是一个“虚拟文件系统(virtual filesystem)”喔!他放置的数 据都是在内存当中， 例如系统核心、行程信息(process)、周边设备的 状态及网络状态等等。因为这个目录下的数据都是在内存当中， 所以本身 不占任何硬盘空间啊!比较重要的文件例如:<code>/proc/cpuinfo</code>, <code>/proc/dma</code>, <code>/proc/interrupts</code>, <code>/proc/ioports</code>, <code>/proc/net/\\*</code> 等等。</td></tr><tr><td style="text-align:center;"><code>/sys</code></td><td style="text-align:left;">这个目录其实跟<code>/proc</code>非常类似，也是一个虚拟的文件系统，主要也是记录 核心与系统硬件信息较相关的信息。 包括目前已载入的核心模块与核心侦 测到的硬件设备信息等等。这个目录同样不占硬盘容量喔</td></tr></tbody></table><h3 id="usr的次目录" tabindex="-1"><a class="header-anchor" href="#usr的次目录" aria-hidden="true">#</a> <code>/usr</code>的次目录</h3><p>依据 FHS 的基本定义，/usr 里面放置的数据属于可分享的与不可变动的(shareable, static)， 如果你知道如何通过网络进行分区的挂载(例如在服务器篇会谈到的 NFS 服务 器)，那么<code>/usr</code>确实可以分享给区域网络内的其他主机来使用</p><table><thead><tr><th style="text-align:center;">目录</th><th style="text-align:left;">文件内容</th></tr></thead><tbody><tr><td style="text-align:center;"><code>/usr/bin/</code></td><td style="text-align:left;">所有一般用户能够使用的指令都放在这里!目前新的 CentOS 7 已经将 全部的使用者指令放置于此，而使用链接文件的方式将 /bin 链接至此! 也就是说， <code>/usr/bin</code> 与 <code>/bin</code> 是一模一样了!另外，FHS 要求在此目录 下不应该有子目录!</td></tr><tr><td style="text-align:center;"><code> /usr/lib/</code></td><td style="text-align:left;">基本上，与 <code>/lib</code> 功能相同，所以 <code>/lib</code> 就是链接到此目录中的!</td></tr><tr><td style="text-align:center;"><code>/usr/local/</code></td><td style="text-align:left;">系统管理员在本机自行安装自己下载的软件(非 distribution 默认提供 者)，建议安装到此目录， 这样会比较便于管理。举例来说，你的 distribution 提供的软件较旧，你想安装较新的软件但又不想移除旧版， 此时你可以将新版软件安装于<code>/usr/local/</code>目录下，可与原先的旧版软件 有分别啦! 你可以自行到<code>/usr/local</code>去看看，该目录下也是具有 bin, etc, include, lib...的次目录喔</td></tr><tr><td style="text-align:center;"><code>/usr/sbin/</code></td><td style="text-align:left;">非系统正常运行所需要的系统指令。最常见的就是某些网络服务器软件 的服务指令(daemon)啰!不过基本功能与 /sbin 也差不多， 因此目 前 /sbin 就是链接到此目录中的。</td></tr><tr><td style="text-align:center;"><code>/usr/share/</code></td><td style="text-align:left;">主要放置只读架构的数据文件，当然也包括共享文件。在这个目录下放 置的数据几乎是不分硬件架构均可读取的数据， 因为几乎都是文字文 件嘛!在此目录下常见的还有这些次目录:<code>/usr/share/man</code>:线上说明 文档 <code>/usr/share/doc</code>:软件杂项的文件说明 <code>/usr/share/zoneinfo</code>:与时 区有关的时区文件</td></tr></tbody></table><h3 id="var的次目录" tabindex="-1"><a class="header-anchor" href="#var的次目录" aria-hidden="true">#</a> <code>/var</code>的次目录</h3><p>如果/usr 是安装时会占用较大硬盘容量的目录，那么/var 就是在系统运行后才会渐渐占用硬盘 容量的目录。 因为/var 目录主要针对常态性变动的文件，包括高速缓存(cache)、登录文件 (log file)以及某些软件运行所产生的文件， 包括程序文件(lock file, run file)，或者例如 MySQL 数据库的文件等等。常见的次目录有：</p><table><thead><tr><th style="text-align:center;">目录</th><th style="text-align:left;">文件内容</th></tr></thead><tbody><tr><td style="text-align:center;"><code>/var/cache/</code></td><td style="text-align:left;">应用程序本身运行过程中会产生的一些暂存盘</td></tr><tr><td style="text-align:center;"><code>/var/lib/</code></td><td style="text-align:left;">程序本身执行的过程中，需要使用到的数据文件放置的目录。在此目录下 各自的软件应该要有各自的目录。 举例来说，MySQL 的数据库放置 到<code>/var/lib/mysql/</code>而 rpm 的数据库则放到<code>/var/lib/rpm</code>去</td></tr><tr><td style="text-align:center;"><code>/var/lock/</code></td><td style="text-align:left;">某些设备或者是文件资源一次只能被一个应用程序所使用，如果同时有两 个程序使用该设备时， 就可能产生一些错误的状况，因此就得要将该设备 上锁(lock)，以确保该设备只会给单一软件所使用。 举例来说，烧录机 正在烧录一块光盘，你想一下，会不会有两个人同时在使用一个烧录机烧 片? 如果两个人同时烧录，那片子写入的是谁的数据?所以当第一个人在 烧录时该烧录机就会被上锁， 第二个人就得要该设备被解除锁定(就是前 一个人用完了)才能够继续使用啰。目前此目录也已经挪到 <code>/run/lock</code> 中</td></tr><tr><td style="text-align:center;"><code>/var/log/</code></td><td style="text-align:left;">重要到不行!这是登录文件放置的目录!里面比较重要的文件 如<code>/var/log/messages</code>, <code>/var/log/wtmp</code>(记录登陆者的信息)等</td></tr><tr><td style="text-align:center;"><code>/var/mail/</code></td><td style="text-align:left;">放置个人电子邮件信箱的目录，不过这个目录也被放置到<code>/var/spool/mail/</code> 目录中! 通常这两个目录是互为链接文件</td></tr><tr><td style="text-align:center;"><code>/var/run/</code></td><td style="text-align:left;">某些程序或者是服务启动后，会将他们的 PID 放置在这个目录下; 与 <code>/run</code> 相同，这个目录链接到 <code>/run</code></td></tr><tr><td style="text-align:center;"><code>/var/spool/</code></td><td style="text-align:left;">这个目录通常放置一些伫列数据，所谓的“伫列”就是排队等待其他程序使用的数据; 这些数据被使用后通常都会被删除。举例来说，系统收到新 信会放置到<code>/var/spool/mail/</code>中， 但使用者收下该信件后该封信原则上就会 被删除。信件如果暂时寄不出去会被放到<code>/var/spool/mqueue/</code>中， 等到被 送出后就被删除。如果是工作调度数据(crontab)，就会被放置 到<code>/var/spool/cron/</code>目录中</td></tr></tbody></table><h2 id="文件系统" tabindex="-1"><a class="header-anchor" href="#文件系统" aria-hidden="true">#</a> 文件系统</h2><h3 id="磁盘与目录的容量" tabindex="-1"><a class="header-anchor" href="#磁盘与目录的容量" aria-hidden="true">#</a> 磁盘与目录的容量</h3><ul><li><strong>df</strong>: 列出文件系统的整体磁盘使用量;</li><li><strong>du</strong>: 评估文件系统的磁盘使用量(常用在推估目录所占容量)。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">df</span> <span class="token parameter variable">-h</span>
 <span class="token parameter variable">-a</span> :列出所有的文件系统，包括系统特有的 /proc 等文件系统<span class="token punctuation">;</span>
 <span class="token parameter variable">-k</span> :以 KBytes 的容量显示各文件系统<span class="token punctuation">;</span>
 <span class="token parameter variable">-m</span> :以 MBytes 的容量显示各文件系统<span class="token punctuation">;</span>
 <span class="token parameter variable">-h</span> :以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示<span class="token punctuation">;</span>
 <span class="token parameter variable">-H</span> :以 <span class="token assign-left variable">M</span><span class="token operator">=</span>1000K 取代 <span class="token assign-left variable">M</span><span class="token operator">=</span>1024K 的进位方式<span class="token punctuation">;</span>
 <span class="token parameter variable">-T</span> :连同该 partition 的 filesystem 名称 <span class="token punctuation">(</span>例如 xfs<span class="token punctuation">)</span> 也列出<span class="token punctuation">;</span>
 <span class="token parameter variable">-i</span> :不用磁盘容量，而以 inode 的数量来显示

Filesystem                         Size  Used Avail Use% Mounted on
udev                               932M     <span class="token number">0</span>  932M   <span class="token number">0</span>% /dev
tmpfs                              196M  <span class="token number">1</span>.4M  194M   <span class="token number">1</span>% /run
/dev/mapper/ubuntu--vg-ubuntu--lv   19G  <span class="token number">4</span>.7G   13G  <span class="token number">27</span>% /
tmpfs                              977M     <span class="token number">0</span>  977M   <span class="token number">0</span>% /dev/shm
tmpfs                              <span class="token number">5</span>.0M     <span class="token number">0</span>  <span class="token number">5</span>.0M   <span class="token number">0</span>% /run/lock
tmpfs                              977M     <span class="token number">0</span>  977M   <span class="token number">0</span>% /sys/fs/cgroup
/dev/loop0                          50M   50M     <span class="token number">0</span> <span class="token number">100</span>% /snap/snapd/18596
/dev/loop2                          64M   64M     <span class="token number">0</span> <span class="token number">100</span>% /snap/core20/1852
/dev/loop1                          92M   92M     <span class="token number">0</span> <span class="token number">100</span>% /snap/lxd/24061
/dev/loop3                          68M   68M     <span class="token number">0</span> <span class="token number">100</span>% /snap/lxd/22753
/dev/loop4                          62M   62M     <span class="token number">0</span> <span class="token number">100</span>% /snap/core20/1611
/dev/sda2                          <span class="token number">2</span>.0G  108M  <span class="token number">1</span>.7G   <span class="token number">6</span>% /boot
tmpfs                              196M     <span class="token number">0</span>  196M   <span class="token number">0</span>% /run/user/1000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">du</span> <span class="token parameter variable">-h</span>
 <span class="token parameter variable">-a</span> :列出所有的文件与目录容量，因为默认仅统计目录下面的文件量而已。
 <span class="token parameter variable">-h</span> :以人们较易读的容量格式 <span class="token punctuation">(</span>G/M<span class="token punctuation">)</span> 显示<span class="token punctuation">;</span>
 <span class="token parameter variable">-s</span> :列出总量而已，而不列出每个各别的目录占用容量<span class="token punctuation">;</span>
 <span class="token parameter variable">-S</span> :不包括子目录下的总计，与 <span class="token parameter variable">-s</span> 有点差别。
 <span class="token parameter variable">-k</span> :以 KBytes 列出容量显示<span class="token punctuation">;</span>
 <span class="token parameter variable">-m</span> :以 MBytes 列出容量显示<span class="token punctuation">;</span>

<span class="token number">4</span>.0K	./.cache
<span class="token number">4</span>.0K	./.local/share/nano
<span class="token number">8</span>.0K	./.local/share
12K	./.local
<span class="token number">8</span>.0K	./test
<span class="token number">4</span>.0K	./.ssh
48K	<span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实体链接与符号链接-ln" tabindex="-1"><a class="header-anchor" href="#实体链接与符号链接-ln" aria-hidden="true">#</a> 实体链接与符号链接: <strong>ln</strong></h3><p>在 Linux 下面的链接文件有两种，一种是类似 Windows 的捷径功能的文件，可以让你快速的 链接到目标文件(或目录); 另一种则是通过文件系统的 inode 链接来产生新文件名，而不 是产生新文件!这种称为实体链接 (hard link)。</p><h4 id="hard-link-实体链接-硬式链接或实际链接" tabindex="-1"><a class="header-anchor" href="#hard-link-实体链接-硬式链接或实际链接" aria-hidden="true">#</a> Hard Link (实体链接, 硬式链接或实际链接)</h4><ul><li>每个文件都会占用一个 inode ，文件内容由 inode 的记录来指向;</li><li>想要读取该文件，必须要经过目录记录的文件名来指向到正确的 inode 号码才能读取.</li></ul><p>文件名只与目录有关，但是文件内容则与 inode 有关。那么想一想， 有没有 可能有多个文件名对应到同一个 inode 号码呢?有的!那就是 hard link 的由来。 所以简单的 说:hard link 只是在某个目录下新增一笔文件名链接到某 inode 号码的关连记录而已。</p><p>限制：</p><ul><li>不能跨 Filesystem;</li><li>不能 link 目录。</li></ul><h4 id="symbolic-link-符号链接-亦即是软链接" tabindex="-1"><a class="header-anchor" href="#symbolic-link-符号链接-亦即是软链接" aria-hidden="true">#</a> Symbolic Link (符号链接，亦即是软链接)</h4><p>基本上， Symbolic link 就是在创建一个 独立的文件，而这个文件会让数据的读取指向他 link 的那个文件的文件名!由于只是利用文 件来做为指向的动作， 所以，当来源文件被删除之后，symbolic link 的文件会“开不了”， 会 一直说“无法打开某文件!”。实际上就是找不到原始“文件名”而已。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ln</span> <span class="token punctuation">[</span>-sf<span class="token punctuation">]</span> 来源文件 目标文件
<span class="token parameter variable">-s</span> :如果不加任何参数就进行链接，那就是hard link，至于 <span class="token parameter variable">-s</span> 就是symbolic <span class="token function">link</span>
<span class="token parameter variable">-f</span> :如果 目标文件 存在时，就主动的将目标文件直接移除后再创建<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="磁盘分区状态" tabindex="-1"><a class="header-anchor" href="#磁盘分区状态" aria-hidden="true">#</a> 磁盘分区状态</h3><ul><li><code>lsblk</code> 列出系统上的所有磁盘列表</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lsblk <span class="token punctuation">[</span>-dfimpt<span class="token punctuation">]</span> <span class="token punctuation">[</span>device<span class="token punctuation">]</span>
<span class="token parameter variable">-d</span> :仅列出磁盘本身，并不会列出该磁盘的分区数据
<span class="token parameter variable">-f</span> :同时列出该磁盘内的文件系统名称
<span class="token parameter variable">-i</span> :使用 ASCII 的线段输出，不要使用复杂的编码 <span class="token punctuation">(</span>再某些环境下很有用<span class="token punctuation">)</span>
<span class="token parameter variable">-m</span> :同时输出该设备在 /dev 下面的权限数据 <span class="token punctuation">(</span>rwx 的数据<span class="token punctuation">)</span>
<span class="token parameter variable">-p</span> :列出该设备的完整文件名<span class="token operator">!</span>而不是仅列出最后的名字而已。
<span class="token parameter variable">-t</span> :列出该磁盘设备的详细数据，包括磁盘伫列机制、预读写的数据量大小等
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>NAME                      MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
fd0                         <span class="token number">2</span>:0    <span class="token number">1</span>  <span class="token number">1</span>.4M  <span class="token number">0</span> disk
sda                         <span class="token number">8</span>:0    <span class="token number">0</span>   40G  <span class="token number">0</span> disk
├─sda1                      <span class="token number">8</span>:1    <span class="token number">0</span>    1M  <span class="token number">0</span> part
├─sda2                      <span class="token number">8</span>:2    <span class="token number">0</span>    2G  <span class="token number">0</span> part /boot
└─sda3                      <span class="token number">8</span>:3    <span class="token number">0</span>   38G  <span class="token number">0</span> part
  └─ubuntu--vg-ubuntu--lv <span class="token number">253</span>:0    <span class="token number">0</span>   19G  <span class="token number">0</span> lvm  /
sr0                        <span class="token number">11</span>:0    <span class="token number">1</span> <span class="token number">97</span>.6M  <span class="token number">0</span> rom
sr1                        <span class="token number">11</span>:1    <span class="token number">1</span>  <span class="token number">1</span>.3G  <span class="token number">0</span> rom
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>blkid</code> 列出设备的 UUID 等参数</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/dev/fd0: <span class="token assign-left variable">SEC_TYPE</span><span class="token operator">=</span><span class="token string">&quot;msdos&quot;</span> <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">&quot;5676-7205&quot;</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">&quot;vfat&quot;</span>
/dev/sr0: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">&quot;2023-03-22-14-15-38-00&quot;</span> <span class="token assign-left variable">LABEL</span><span class="token operator">=</span><span class="token string">&quot;CDROM&quot;</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">&quot;iso9660&quot;</span>
/dev/sr1: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">&quot;2022-08-31-07-37-40-00&quot;</span> <span class="token assign-left variable">LABEL</span><span class="token operator">=</span><span class="token string">&quot;Ubuntu-Server 20.04.5 LTS amd64&quot;</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">&quot;iso9660&quot;</span> <span class="token assign-left variable">PTUUID</span><span class="token operator">=</span><span class="token string">&quot;36c74be4&quot;</span> <span class="token assign-left variable">PTTYPE</span><span class="token operator">=</span><span class="token string">&quot;dos&quot;</span>
/dev/sda2: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">&quot;8b24a183-1280-405c-91d5-1097db53f04e&quot;</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">&quot;ext4&quot;</span> <span class="token assign-left variable">PARTUUID</span><span class="token operator">=</span><span class="token string">&quot;e313ad0f-e1d9-4e32-ab6f-4acc9f78cca0&quot;</span>
/dev/sda3: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">&quot;93bs5R-CrJI-yWJ7-XLIu-gC7U-ZK6v-LTTK1f&quot;</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">&quot;LVM2_member&quot;</span> <span class="token assign-left variable">PARTUUID</span><span class="token operator">=</span><span class="token string">&quot;e8abb4a9-5160-4bdd-abfb-5faf505b6ee1&quot;</span>
/dev/mapper/ubuntu--vg-ubuntu--lv: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">&quot;ebab41bc-91f2-41de-aa33-e4bf684ec07c&quot;</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">&quot;ext4&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>parted</code> 列出磁盘的分区表类型与分区信息</li></ul>`,33),d=[l];function o(c,r){return s(),n("div",null,d)}const p=e(t,[["render",o],["__file","system.html.vue"]]);export{p as default};
