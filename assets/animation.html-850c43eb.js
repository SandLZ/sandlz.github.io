import{_ as a,p as n,q as s,a1 as e}from"./framework-201fec1f.js";const i={},t=e(`<h1 id="动画" tabindex="-1"><a class="header-anchor" href="#动画" aria-hidden="true">#</a> 动画</h1><p>在 CSS3 出现之前，动画都是通过 JavaScript 动态的改变元素的样式属性来完成了，这种方式虽然能够实现动画，但是在性能上存在一些问题。CSS3 的出现，让动画变得更加容易，性能也更加好。 CSS3 中有三个关于动画的样式属性 <code>transition</code>、<code>transform</code> 和 <code>animation</code>；</p><h2 id="tansition" tabindex="-1"><a class="header-anchor" href="#tansition" aria-hidden="true">#</a> <code>tansition</code></h2><p><code>tansition</code> 翻译为 <strong>过渡</strong>，过渡是 CSS3 中具有颠覆性的一个特征，可以实现元素不同状态间的平滑过渡（补间动画），经常用来制作动画效果。</p><ul><li><p><strong>补间动画</strong>：自动完成从起始状态到终止状态的的过渡。不用管中间的状态。</p></li><li><p><strong>帧动画</strong>：通过一帧一帧的画面按照固定顺序和速度播放。如电影胶片</p></li></ul><p><code>transition</code> 包括以下属性：</p><ul><li><p><code>transition-property</code>: all; 如果希望所有的属性都发生过渡，就使用 all。</p></li><li><p><code>transition-duration</code>: 1s; 过渡的持续时间。</p></li><li><p><code>transition-timing-function</code>: linear; 运动曲线。属性值可以是：</p><ul><li><code>linear</code> 线性</li><li><code>ease</code> 减速</li><li><code>ease-in</code> 加速</li><li><code>ease-out</code> 减速</li><li><code>ease-in-out</code> 先加速后减速</li><li><code>transition-delay</code>: 1s; 过渡延迟。多长时间后再执行这个过渡动画。</li></ul></li></ul><p>上面的四个属性也可以写成综合属性：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/** transition: 让哪些属性进行过度 过渡的持续时间 运动曲线 延迟时间; */</span>
<span class="token property">transition</span><span class="token punctuation">:</span> all 3s linear 0s<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="transform" tabindex="-1"><a class="header-anchor" href="#transform" aria-hidden="true">#</a> <code>transform</code></h2><p><code>tansform</code> 翻译为 <strong>转换</strong>，包含</p><ul><li>2D 转换</li><li>3D 转换</li></ul><h3 id="_2d-转换" tabindex="-1"><a class="header-anchor" href="#_2d-转换" aria-hidden="true">#</a> 2D 转换</h3><p>2D 转换包括：</p><ul><li><code>scale</code> 缩放</li><li><code>translate</code> 移动</li><li><code>rotate</code> 旋转</li></ul><h4 id="scale" tabindex="-1"><a class="header-anchor" href="#scale" aria-hidden="true">#</a> <code>scale</code></h4><p>x：表示水平方向的缩放倍数。y：表示垂直方向的缩放倍数。如果只写一个值就是等比例缩放</p><p>取值：大于 1 表示放大，小于 1 表示缩小。不能为百分比。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="translate" tabindex="-1"><a class="header-anchor" href="#translate" aria-hidden="true">#</a> <code>translate</code></h4><p>参数为百分比，相对于自身移动。</p><p>正值：向右和向下。 负值：向左和向上。如果只写一个值，则表示水平移动。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>水平位移<span class="token punctuation">,</span> 垂直位移<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="rotate" tabindex="-1"><a class="header-anchor" href="#rotate" aria-hidden="true">#</a> <code>rotate</code></h4><p>参数：正值 顺时针；负值：逆时针。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>角度<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>rotate</code> 旋转时，默认是以盒子的正中心为坐标原点的。如果想改变旋转的坐标原点，可以用<code>transform-origin</code>属性。格式如下：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">transform-origin</span><span class="token punctuation">:</span> 水平坐标 垂直坐标<span class="token punctuation">;</span>

<span class="token property">transform-origin</span><span class="token punctuation">:</span> 50px 50px<span class="token punctuation">;</span>

<span class="token property">transform-origin</span><span class="token punctuation">:</span> center bottom<span class="token punctuation">;</span> //旋转时，以盒子底部的中心为坐标原点
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3d-转换" tabindex="-1"><a class="header-anchor" href="#_3d-转换" aria-hidden="true">#</a> 3D 转换</h3><p>3D 转换包括：</p><ul><li><code>translate</code> 移动</li><li><code>rotate</code> 旋转</li><li><code>perspective</code> 透视</li><li><code>transform-style</code> 呈现</li></ul><h4 id="translate-1" tabindex="-1"><a class="header-anchor" href="#translate-1" aria-hidden="true">#</a> <code>translate</code></h4><ul><li><code>translateX</code></li><li><code>translateY</code></li><li><code>translateZ</code></li></ul><h4 id="rotate-1" tabindex="-1"><a class="header-anchor" href="#rotate-1" aria-hidden="true">#</a> <code>rotate</code></h4><ul><li><code>rotateX</code></li><li><code>rotateY</code></li><li><code>rotateZ</code></li></ul><p>旋转的方向：（左手法则）</p><h4 id="perspective" tabindex="-1"><a class="header-anchor" href="#perspective" aria-hidden="true">#</a> <code>perspective</code></h4><p>电脑显示屏是一个 2D 平面，图像之所以具有立体感（3D 效果），其实只是一种视觉呈现，通过透视可以实现此目的。</p><p>透视可以将一个 2D 平面，在转换的过程当中，呈现 3D 效果。但仅仅只是视觉呈现出 3d 效果，并不是正真的 3d。</p><p>格式有两种写法：</p><ul><li><p>作为一个属性，设置给父元素，作用于所有 3D 转换的子元素</p></li><li><p>作为 transform 属性的一个值，做用于元素自身。</p></li></ul><h4 id="transform-style" tabindex="-1"><a class="header-anchor" href="#transform-style" aria-hidden="true">#</a> <code>transform-style</code></h4><p>3D 元素构建是指某个图形是由多个元素构成的，可以给这些元素的父元素设置<code>transform-style: preserve-3d</code>来使其变成一个真正的 3D 图形。属性值可以如下：</p><h2 id="animation" tabindex="-1"><a class="header-anchor" href="#animation" aria-hidden="true">#</a> <code>animation</code></h2><p>动画是 CSS3 中具有颠覆性的特征，可通过设置多个节点 来精确控制一个或一组动画，常用来实现复杂的动画效果。</p><h3 id="定义动画的步骤" tabindex="-1"><a class="header-anchor" href="#定义动画的步骤" aria-hidden="true">#</a> 定义动画的步骤</h3><p>（1）通过@keyframes 定义动画；</p><p>（2）将这段动画通过百分比，分割成多个节点；然后各节点中分别定义各属性；</p><p>（3）在指定元素里，通过 animation 属性调用动画。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>定义动画：
<span class="token atrule"><span class="token rule">@keyframes</span> 动画名</span><span class="token punctuation">{</span>
    <span class="token selector">from</span><span class="token punctuation">{</span> 初始状态 <span class="token punctuation">}</span>
    <span class="token selector">to</span><span class="token punctuation">{</span> 结束状态 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

调用：
<span class="token property">animation</span><span class="token punctuation">:</span> 动画名称 持续时间；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">animation</span><span class="token punctuation">:</span> 定义的动画名称 持续时间  执行次数  是否反向  运动曲线 延迟执行。<span class="token punctuation">(</span>infinite 表示无限次<span class="token punctuation">)</span>

<span class="token property">animation</span><span class="token punctuation">:</span> move1 1s  alternate linear 3<span class="token punctuation">;</span>

<span class="token property">animation</span><span class="token punctuation">:</span> move2 4s<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动画属性" tabindex="-1"><a class="header-anchor" href="#动画属性" aria-hidden="true">#</a> 动画属性</h3><p>我们刚刚在调用动画时，animation 属性的格式如下：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">animation</span><span class="token punctuation">:</span> 定义的动画名称 持续时间  执行次数  是否反向  运动曲线 延迟执行。<span class="token punctuation">(</span>infinite 表示无限次<span class="token punctuation">)</span>

<span class="token property">animation</span><span class="token punctuation">:</span> move1 1s  alternate linear 3<span class="token punctuation">;</span>

<span class="token property">animation</span><span class="token punctuation">:</span> move2 4s<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>动画名称(必须)</li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">animation-name</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>执行一次动画的持续时间：(必须)</li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">animation-duration</span><span class="token punctuation">:</span> 4s<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>动画的执行次数</li></ol><p>属性值 infinite 表示无数次</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li><p>动画的方向</p><p>属性值：<code>normal</code> 正常，<code>alternate</code> 反向。</p></li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">animation-direction</span><span class="token punctuation">:</span> alternate<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>动画延迟执行</li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">animation-delay</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6"><li><p>设置动画结束时，盒子的状态</p><p>属性值： <code>forwards</code>：保持动画结束后的状态（默认），</p><p><code>backwards</code>：动画结束后回到最初的状态。</p></li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">animation-fill-mode</span><span class="token punctuation">:</span> forwards<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="7"><li><p>运动曲线</p><p>属性值可以是：<code>linear</code>、 <code>ease-in-out</code>、 <code>steps()</code>等。</p></li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">animation-timing-function</span><span class="token punctuation">:</span> ease-in<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,69),c=[t];function o(l,d){return n(),s("div",null,c)}const r=a(i,[["render",o],["__file","animation.html.vue"]]);export{r as default};
