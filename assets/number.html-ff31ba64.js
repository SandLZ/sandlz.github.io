import{_ as n,M as s,p as r,q as c,R as e,t as d,N as i,a1 as t}from"./framework-201fec1f.js";const o={},l=t(`<h1 id="数字" tabindex="-1"><a class="header-anchor" href="#数字" aria-hidden="true">#</a> 数字</h1><p>灵魂一问：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
<span class="token comment">// 0.30000000000000004</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="why" tabindex="-1"><a class="header-anchor" href="#why" aria-hidden="true">#</a> Why?</h2><p>计算机里所有的数据最终都是以二进制保存的，当然数字也一样. 所以当计算机计算<code>0.1+0.2</code>的时候，实际上计算的是这两个数字在计算机里所存储的二进制.</p><p>0.1 二进制表达：0.000110011001100110011001100110011001100110011001100...(1100循环) 0.2 二进制表达：0.00110011001100110011001100110011001100110011001100... (1100循环)</p><p>我们发现，它们都是无限循环的二进制。显然，计算机当然不会用自己“无限的空间”去存储这些无限循环的二进制数字。那对于这类数据该怎么办？</p><h2 id="js如何处理无限循环的二进制数字" tabindex="-1"><a class="header-anchor" href="#js如何处理无限循环的二进制数字" aria-hidden="true">#</a> JS如何处理无限循环的二进制数字</h2><p>JavaScript中所用的数字包括整数和小数，都只有一种类型就是Number，它的实现遵循<code>IEEE 754</code>标准. 使用64位固定长度来表示，也就是标准的double双精度浮点数（相关的还有float 32位单精度）; 我们只需要知道，在二进制科学表示法中， 双精度浮点的<code>小数部分最多只能保留52位</code>（比如1.xxx...*2^n,这里x最多保留52位）加上前面的1，其实就是保留53位有效数字，剩余的舍去，遵从“0舍1入”，</p><p>0.1二进制舍弃后</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">0.00011001100110011001100110011001100110011001100110011010</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>0.2二进制舍弃后</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">0.0011001100110011001100110011001100110011001100110011010</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>二者相加：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">0.0100110011001100110011001100110011001100110011001100111</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>转为10进制 =&gt; <code>0.30000000000000004</code></p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,17),p={href:"https://juejin.cn/post/6844903700356399112",target:"_blank",rel:"noopener noreferrer"};function u(v,h){const a=s("ExternalLinkIcon");return r(),c("div",null,[l,e("ul",null,[e("li",null,[e("a",p,[d("0.1+0.2"),i(a)])])])])}const b=n(o,[["render",u],["__file","number.html.vue"]]);export{b as default};
