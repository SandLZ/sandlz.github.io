import{_ as p,M as o,p as c,q as i,R as n,t as s,N as t,a1 as e}from"./framework-201fec1f.js";const l={},u=e('<h1 id="单元测试" tabindex="-1"><a class="header-anchor" href="#单元测试" aria-hidden="true">#</a> 单元测试</h1><blockquote><p>很长一段时间以来，单元测试并不是前端工程师应具备的一项技能，但随着前端工程化的发展，项目日渐复杂化及代码追求高复用性等，促使单元测试愈发重要，决定整个项目质量的关键因素之一</p></blockquote><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><h3 id="单元测试-1" tabindex="-1"><a class="header-anchor" href="#单元测试-1" aria-hidden="true">#</a> 单元测试</h3><p>单一的代码单元</p><ul><li>类</li><li>对象</li><li>函数</li><li>...</li></ul><p>FIRST原则</p><ol><li><code>快速(Fast)</code>：单元测试执行一定要快，这样研发同学可以在项目周期的任意时间点，可以方便地执行单元测试，即便是有几千个单元测试也不影响。这些单元测试最好在几秒内运行完并返回期望的结果。</li><li><code>(Isolated)</code>：每一个测试用例运行时、准备环境变量时或测试前环境搭建过程中，都是隔离的。过程中，不能有相互依赖，这样最终的测试结果可以不受其它因素的影响。</li><li><code>(Repeatable) 执行</code>：单元测试可以在不做任何修改情况下，在任何环境下执行。如果单元测试不依赖网络或数据库，单元测试失败原因的排查中，就不用考虑这方面的原因，毕竟单元测试依赖的只是被测试类或方法中的代码。这个原则，可以方便地让自己的单元测试逻辑保持良好的价值。</li><li><code>试中自校验 (Self-validating)</code>：写了单元测试后，咱们不能再依赖肉眼观察，看被测代码的结果是否正确。测试代码自身会明白无误地告诉咱哪条测试用例失败了。</li><li><code>(Timely)</code>：按 TDD 的理念，应该在相应的业务代码之前定单元测试。这一点上，大家可以自己掌握是否采用 TDD 的开发理念。不过，这个的理念是，即时地写单元代码，即便是很小的代码也是这样。</li></ol><h3 id="集成测试" tabindex="-1"><a class="header-anchor" href="#集成测试" aria-hidden="true">#</a> 集成测试</h3><p>一组需要运行多个测试进行验证的过程，通常是为了验证各个程序单元一起工作时的结果是否符合预期</p><h3 id="验收测试-功能测试" tabindex="-1"><a class="header-anchor" href="#验收测试-功能测试" aria-hidden="true">#</a> 验收测试/功能测试</h3><p>从<code>产品/用户</code>角度对整个系统进行的测试，判断系统是否满足用户的验收条件。例如使用Selenium对Web应用进行自动化测试。</p><h3 id="tdd" tabindex="-1"><a class="header-anchor" href="#tdd" aria-hidden="true">#</a> TDD</h3><p>Test Driven Development：测试驱动开发</p><p>一种开发方式，以测试来驱动整个项目，即先根据接口完成测试编写，然后在完成功能时要不断通过测试，最终目的是通过所有测试。</p><p><img src="https://joshldavis.com/img/tdd-vs-bdd/tdd-flowchart.png" alt="image"></p><p>特点：先写测试用例，再写业务代码</p><h3 id="bdd" tabindex="-1"><a class="header-anchor" href="#bdd" aria-hidden="true">#</a> BDD</h3><p>Behavior Driven Development 行为驱动开发</p><p>领域特定语言描述用户行为，定义业务需求，让开发者集中精力于代码的写法而不是技术细节上。着重在整个开发层面所有参与者对行为和业务的理解</p><p>特点：关注行为，不关注具体实现细节</p><h2 id="目的" tabindex="-1"><a class="header-anchor" href="#目的" aria-hidden="true">#</a> 目的</h2><ul><li>保证代码的质量，验证功能完整性</li></ul><h2 id="金字塔" tabindex="-1"><a class="header-anchor" href="#金字塔" aria-hidden="true">#</a> 金字塔</h2><p><img src="https://github.com/zliu/images/raw/master/uPic/55113335-24fcff00-50df-11e9-87e8-cdd5e0e6ad3f.png" alt=""></p><h2 id="测试框架" tabindex="-1"><a class="header-anchor" href="#测试框架" aria-hidden="true">#</a> 测试框架</h2>',26),r=n("thead",null,[n("tr",null,[n("th",null,"名称"),n("th",null,"功能"),n("th",null,"特点"),n("th",null,"说明"),n("th",null,"Star")])],-1),d={href:"https://jestjs.io/",target:"_blank",rel:"noopener noreferrer"},k=n("td",null,[s("断言"),n("br"),s("仿真"),n("br"),s("快照"),n("br"),s("报告"),n("br"),s("Mock")],-1),h=n("br",null,null,-1),v={href:"https://jasmine.github.io/",target:"_blank",rel:"noopener noreferrer"},b=n("br",null,null,-1),m=n("br",null,null,-1),g=n("td",null,"Unit",-1),f=n("td",null,"33.8K",-1),_={href:"https://mochajs.org/",target:"_blank",rel:"noopener noreferrer"},y=n("td",null,"需集成断言等",-1),x=n("td",null,"需集成其他库,如chai",-1),j=n("td",null,"~",-1),q=n("td",null,"20.1K",-1),w={href:"https://karma-runner.github.io/5.2/intro/installation.html",target:"_blank",rel:"noopener noreferrer"},D=n("td",null,"提供浏览器测试环境",-1),E=n("td",null,"本地浏览器环境",-1),B=n("td",null,"~",-1),V=n("td",null,"11.4K",-1),T={href:"https://www.cypress.io/",target:"_blank",rel:"noopener noreferrer"},K=n("td",null,[s("断言"),n("br"),s("仿真"),n("br"),s("快照"),n("br"),s("报告"),n("br"),s("Mock"),n("br"),s("截图")],-1),P=n("td",null,"整体解决方案",-1),S=n("td",null,"All",-1),J=n("td",null,"26.4K",-1),M={href:"https://pptr.dev/",target:"_blank",rel:"noopener noreferrer"},A=n("td",null,"提供Chrome测试环境",-1),N=n("td",null,null,-1),z=n("td",null,"E2E",-1),C=n("td",null,"68.1K",-1),I={href:"https://jasmine.github.io",target:"_blank",rel:"noopener noreferrer"},W=n("td",null,[s("断言"),n("br"),s("报告")],-1),F=n("td",null,[s("No DOM"),n("br"),s("No Deps")],-1),H=n("td",null,"Unit",-1),R=n("td",null,"15K",-1),L=e(`<p><img src="https://github.com/zliu/images/raw/master/uPic/Ic8Kq9.png" alt="stateofjs 2020"></p><h2 id="三大框架" tabindex="-1"><a class="header-anchor" href="#三大框架" aria-hidden="true">#</a> 三大框架</h2><h3 id="angular" tabindex="-1"><a class="header-anchor" href="#angular" aria-hidden="true">#</a> Angular</h3><p><strong>Karma</strong> + Jasmine + <strong>Protractor</strong></p><blockquote><p>Karma、Protractor is maintained by Angular Team.</p></blockquote><p>Karma + Jasmine ：Unit test、Intergration test</p><p>Protractor: E2E test</p><h3 id="react" tabindex="-1"><a class="header-anchor" href="#react" aria-hidden="true">#</a> React</h3><p>Jest or Test Library for react</p><h3 id="vue" tabindex="-1"><a class="header-anchor" href="#vue" aria-hidden="true">#</a> Vue</h3><p>@vue/test-utils + Jest</p><p>可选方案：</p><ul><li>@vue/test-utils + Mocha</li><li>@vue/test-utils + Cypress</li></ul><h2 id="karma" tabindex="-1"><a class="header-anchor" href="#karma" aria-hidden="true">#</a> Karma</h2><p><img src="https://github.com/zliu/images/raw/master/uPic/E4wM1G.png" alt=""></p><h2 id="jest" tabindex="-1"><a class="header-anchor" href="#jest" aria-hidden="true">#</a> Jest</h2><p>以Vue2为例</p><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">--dev</span> jest vue-jest @vue/test-utils babel-jest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>jest</td><td>---</td></tr><tr><td>vue-jest</td><td>预处理器：处理.vue文件</td></tr><tr><td>@vue/test-utils</td><td>vue测试工具</td></tr><tr><td>babel-jest</td><td>ES6</td></tr></tbody></table><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3><h4 id="babel-config-js" tabindex="-1"><a class="header-anchor" href="#babel-config-js" aria-hidden="true">#</a> babel.config.js</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;@vue/cli-plugin-babel/preset&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&#39;env&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;env&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">targets</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token string">&#39;current&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="jest-config-js" tabindex="-1"><a class="header-anchor" href="#jest-config-js" aria-hidden="true">#</a> jest.config.js</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">moduleFileExtensions</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;js&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;vue&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// \`vue-jest\` 处理 \`*.vue\` 文件</span>
    <span class="token string-property property">&quot;.*\\\\.(vue)$&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-jest&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// \`babel-jest\` 处理 js</span>
    <span class="token string-property property">&quot;^.+\\\\.js$&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;rootDir&gt;/node_modules/babel-jest&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">moduleNameMapper</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// alias</span>
    <span class="token string-property property">&quot;^@/(.*)$&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;rootDir&gt;/src/$1&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 覆盖率</span>
  <span class="token literal-property property">collectCoverage</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">collectCoverageFrom</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;**/*.{js,vue}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;!**/node_modules/**&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">coverageReporters</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;html&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text-summary&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">coverageDirectory</span><span class="token operator">:</span> <span class="token string">&#39;&lt;rootDir&gt;/coverage&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">coveragePathIgnorePatterns</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;&lt;rootDir&gt;/node_modules/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;rootDir&gt;/coverage/&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>eslint</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token property">&quot;jest&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;node&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><h4 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h4><h5 id="断言" tabindex="-1"><a class="header-anchor" href="#断言" aria-hidden="true">#</a> 断言</h5><blockquote><p>判断一个函数或对象的一个方法所产生的结果是否符合你期望的那个结果</p></blockquote><h4 id="describe" tabindex="-1"><a class="header-anchor" href="#describe" aria-hidden="true">#</a> describe</h4><p>describe 是 Jest 的全局函数，作为一个 Test Suite 的开始，它通常有 2 个参数：字符串和方法。字符串作为特定 Suite 的名字和标题。方法是包含实现 Suite 的代码。</p><p>注：describe会形成一个作用域</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;This is an exmaple suite&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;contains spec with an expectation&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;contains spec with an expectation2&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="expect" tabindex="-1"><a class="header-anchor" href="#expect" aria-hidden="true">#</a> expect</h4><p>在编写测试时，通常需要检查值是否满足某些条件。expect允许您访问许多“匹配器”，这些匹配器允许您验证不同的东西。</p><div><img src="https://github.com/zliu/images/raw/master/uPic/yApj82.png" style="zoom:30%;float:left;"><img src="https://github.com/zliu/images/raw/master/uPic/3Uy7LG.png" style="zoom:30%;float:right;"></div><h4 id="setup-and-teardown" tabindex="-1"><a class="header-anchor" href="#setup-and-teardown" aria-hidden="true">#</a> setup and teardown</h4><p>为了使某个测试用例干净的重复 setup 和 teardown 代码， Jasmine 提供了全局的 beforeEach 和 afterEach 方法。正像其名字一样，beforeEach 方法在 describe 中的每个 Spec 执行之前运行，afterEach 在每个 Spec 调用后运行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;An example of setup and teardown)&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> gVar<span class="token punctuation">;</span>
 
  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    gVar <span class="token operator">=</span> <span class="token number">3.6</span><span class="token punctuation">;</span>
    gVar <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
  <span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    gVar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;after setup, gVar has new value.&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>gVar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token number">4.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;A spec contains 2 expectations.&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    gVar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>gVar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="mock" tabindex="-1"><a class="header-anchor" href="#mock" aria-hidden="true">#</a> mock</h4><h4 id="测试场景" tabindex="-1"><a class="header-anchor" href="#测试场景" aria-hidden="true">#</a> 测试场景</h4><h5 id="异步" tabindex="-1"><a class="header-anchor" href="#异步" aria-hidden="true">#</a> 异步</h5><h6 id="promise" tabindex="-1"><a class="header-anchor" href="#promise" aria-hidden="true">#</a> Promise</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;the data is peanut butter&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;peanut butter&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="async-await" tabindex="-1"><a class="header-anchor" href="#async-await" aria-hidden="true">#</a> Async/Await</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;the data is peanut butter&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;peanut butter&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="settimeout" tabindex="-1"><a class="header-anchor" href="#settimeout" aria-hidden="true">#</a> setTimeout</h6><h5 id="组件" tabindex="-1"><a class="header-anchor" href="#组件" aria-hidden="true">#</a> 组件</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>
<span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">&#39;../src/components/HelloWorld.vue&#39;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;HelloWorld&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;has class name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">classes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;trigger a click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">)</span>
    <span class="token keyword">const</span> message <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;#message&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;testFunction has been clicked!&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,51);function U($,G){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("table",null,[r,n("tbody",null,[n("tr",null,[n("td",null,[n("a",d,[s("Jest"),t(a)])]),k,n("td",null,[s("开箱即用"),h,s("基于"),n("a",v,[s("Jasmine"),t(a)]),s("发展而来"),b,s("JSDOM虚拟环境"),m]),g,f]),n("tr",null,[n("td",null,[n("a",_,[s("Mocha"),t(a)])]),y,x,j,q]),n("tr",null,[n("td",null,[n("a",w,[s("Karma"),t(a)])]),D,E,B,V]),n("tr",null,[n("td",null,[n("a",T,[s("Cypress"),t(a)])]),K,P,S,J]),n("tr",null,[n("td",null,[n("a",M,[s("Puppeteer"),t(a)])]),A,N,z,C]),n("tr",null,[n("td",null,[n("a",I,[s("Jasmine"),t(a)])]),W,F,H,R])])]),L])}const Q=p(l,[["render",U],["__file","unit-test.html.vue"]]);export{Q as default};
