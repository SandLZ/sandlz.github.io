import{_ as c,M as e,p as l,q as i,R as n,N as a,U as p,t as s,a1 as u}from"./framework-201fec1f.js";const r={},d=n("h1",{id:"排序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#排序","aria-hidden":"true"},"#"),s(" 排序")],-1),k={class:"table-of-contents"},v=u(`<h2 id="复杂度汇总" tabindex="-1"><a class="header-anchor" href="#复杂度汇总" aria-hidden="true">#</a> 复杂度汇总</h2><table><thead><tr><th>排序方法</th><th>时间复杂度（平均）</th><th>时间复杂度（最坏)</th><th>时间复杂度（最好)</th><th>空间复杂度</th><th>稳定性</th><th>复杂性</th></tr></thead><tbody><tr><td>直接插入排序</td><td>O(n2)</td><td>O(n2)</td><td>O(n)</td><td>O(1)</td><td>稳定</td><td>简单</td></tr><tr><td>希尔排序</td><td>O(nlog2n)</td><td>O(n2</td><td>O(n)</td><td>O(1)</td><td>不稳定</td><td>较复杂</td></tr><tr><td>直接选择排序</td><td>O(n2)</td><td>O(n2)</td><td>O(n2)</td><td>O(1)</td><td>不稳定</td><td>简单</td></tr><tr><td>堆排序</td><td>O(nlog2n)</td><td>O(nlog2n)</td><td>O(nlog2n)</td><td>O(1)</td><td>不稳定</td><td>较复杂</td></tr><tr><td>冒泡排序</td><td>O(n2)</td><td>O(n2)</td><td>O(n)</td><td>O(1)</td><td>稳定</td><td>简单</td></tr><tr><td>快速排序</td><td>O(nlog2n)</td><td>O(n2)</td><td>O(nlog2n)</td><td>O(nlog2n)</td><td>不稳定</td><td>较复杂</td></tr><tr><td>归并排序</td><td>O(nlog2n)</td><td>O(nlog2n)</td><td>O(nlog2n)</td><td>O(n)</td><td>稳定</td><td>较复杂</td></tr><tr><td>基数排序</td><td>O(d(n+r)</td><td>O(d(n+r))</td><td>O(d(n+r))</td><td>O(n+r)</td><td>稳定</td><td>较复杂</td></tr></tbody></table><h2 id="冒泡排序" tabindex="-1"><a class="header-anchor" href="#冒泡排序" aria-hidden="true">#</a> 冒泡排序</h2><p>冒泡排序（<code>Bubble Sort</code>）是最易懂的排序算法，但是效率较低，生产环境中很少使用。</p><p>它的基本思想是：</p><ol><li>依次比较相邻的两个数，如果不符合排序规则，则调换两个数的位置。这样一遍比较下来，能够保证最大（或最小）的数排在最后一位。</li><li>再对最后一位以外的数组，重复前面的过程，直至全部排序完成。</li></ol><p>由于每进行一次这个过程，在该次比较的最后一个位置上，正确的数会自己冒出来，就好像“冒泡”一样，这种算法因此得名。</p><p>以对数组[3, 2, 4, 5, 1]进行从小到大排序为例，步骤如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>第一位的“3”与第二位的“2”进行比较，3大于2，互换位置，数组变成[2, 3, 4, 5, 1]。

第二位的“3”与第三位的“4”进行比较，3小于4，数组不变。

第三位的“4”与第四位的“5”进行比较，4小于5，数组不变。

第四位的“5”与第五位的“1”进行比较，5大于1，互换位置，数组变成[2, 3, 4, 1, 5]。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一轮排序完成，可以看到最后一位的 5，已经是正确的数了。然后，再对剩下的数[2, 3, 4, 1]重复这个过程，每一轮都会在本轮最后一位上出现正确的数。直至剩下最后一个位置，所有排序结束。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">myArray<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> temp <span class="token operator">=</span> myArray<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">;</span>
  myArray<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">=</span> myArray<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">;</span>
  myArray<span class="token punctuation">[</span>p2<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token parameter">myArray</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> len <span class="token operator">=</span> myArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">var</span> i<span class="token punctuation">;</span>
  <span class="token keyword">var</span> j<span class="token punctuation">;</span>
  <span class="token keyword">var</span> stop<span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> stop <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> stop<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>myArray<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> myArray<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>myArray<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> myArray<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="选择排序" tabindex="-1"><a class="header-anchor" href="#选择排序" aria-hidden="true">#</a> 选择排序</h2><p>选择排序（Selection Sort）与冒泡排序类似，也是依次对相邻的数进行两两比较。不同之处在于，它不是每比较一次就调换位置，而是一轮比较完毕，找到最大值（或最小值）之后，将其放在正确的位置，其他数的位置不变。</p><p>以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：</p><ol><li><p>假定第一位的“3”是最小值。</p></li><li><p>最小值“3”与第二位的“2”进行比较，2 小于 3，所以新的最小值是第二位的“2”。</p></li><li><p>最小值“2”与第三位的“4”进行比较，2 小于 4，最小值不变。</p></li><li><p>最小值“2”与第四位的“5”进行比较，2 小于 5，最小值不变。</p></li><li><p>最小值“2”与第五位的“1”进行比较，1 小于 2，所以新的最小值是第五位的“1”。</p></li><li><p>第五位的“1”与第一位的“3”互换位置，数组变为[1, 2, 4, 5, 3]。</p></li></ol><p>这一轮比较结束后，最小值“1”已经排到正确的位置了，然后对剩下的[2, 4, 5, 3]重复上面的过程。每一轮排序都会将该轮的最小值排到正确的位置，直至剩下最后一个位置，所有排序结束。</p><p>先定义一个交换函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">myArray<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> temp <span class="token operator">=</span> myArray<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">;</span>
  myArray<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">=</span> myArray<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">;</span>
  myArray<span class="token punctuation">[</span>p2<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token parameter">myArray</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> len <span class="token operator">=</span> myArray<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
    min<span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将当前位置设为最小值</span>
    min <span class="token operator">=</span> i<span class="token punctuation">;</span>

    <span class="token comment">// 检查数组其余部分是否更小</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>myArray<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> myArray<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        min <span class="token operator">=</span> j<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 如果当前位置不是最小值，将其换为最小值</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">swap</span><span class="token punctuation">(</span>myArray<span class="token punctuation">,</span> i<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> myArray<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="插入排序" tabindex="-1"><a class="header-anchor" href="#插入排序" aria-hidden="true">#</a> 插入排序</h2><p>插入排序（<code>insertion sort</code>）比前面两种排序方法都更有效率。它将数组分成“已排序”和“未排序”两部分，一开始的时候，“已排序”的部分只有一个元素，然后将它后面一个元素从“未排序”部分插入“已排序”部分，从而“已排序”部分增加一个元素，“未排序”部分减少一个元素。以此类推，完成全部排序。</p><p>以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：</p><ol><li><p>将数组分成[3]和[2, 4, 5, 1]两部分，前者是已排序的，后者是未排序的。</p></li><li><p>取出未排序部分的第一个元素“2”，与已排序部分最后一个元素“3”比较，因为 2 小于 3，所以 2 排在 3 前面，整个数组变成[2, 3]和[4, 5, 1]两部分。</p></li><li><p>取出未排序部分的第一个元素“4”，与已排序部分最后一个元素“3”比较，因为 4 大于 3，所以 4 排在 3 后面，整个数组变成[2, 3, 4]和[5, 1]两部分。</p></li><li><p>取出未排序部分的第一个元素“5”，与已排序部分最后一个元素“4”比较，因为 5 大于 4，所以 5 排在 4 后面，整个数组变成[2, 3, 4, 5]和[1]两部分。</p></li><li><p>取出未排序部分的第一个元素“1”，与已排序部分最后一个元素“5”比较，因为 1 小于 5，所以再与前一个元素“4”比较；因为 1 小于 4，再与前一个元素“3”比较；因为 1 小于 3，再与前一个元素“2”比较；因为小于 1 小于 2，所以“1”排在 2 的前面，整个数组变成[1, 2, 3, 4, 5]。</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token parameter">myArray</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> len <span class="token operator">=</span> myArray<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token comment">// 数组的长度</span>
    value<span class="token punctuation">,</span> <span class="token comment">// 当前比较的值</span>
    i<span class="token punctuation">,</span> <span class="token comment">// 未排序部分的当前位置</span>
    j<span class="token punctuation">;</span> <span class="token comment">// 已排序部分的当前位置</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 储存当前位置的值</span>
    value <span class="token operator">=</span> myArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">/*
     * 当已排序部分的当前元素大于value，
     * 就将当前元素向后移一位，再将前一位与value比较
     */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> myArray<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> value<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      myArray<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> myArray<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    myArray<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> myArray<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="合并排序" tabindex="-1"><a class="header-anchor" href="#合并排序" aria-hidden="true">#</a> 合并排序</h2><p>前面三种排序算法只有教学价值，因为效率低，很少实际使用。合并排序（<code>Merge sort</code>）则是一种被广泛使用的排序方法。</p><p>它的基本思想是，将两个已经排序的数组合并，要比从头开始排序所有元素来得快。因此，可以将数组拆开，分成 n 个只有一个元素的数组，然后不断地两两合并，直到全部排序完成。</p><p>以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：</p><ol><li><p>将数组分成[3, 2, 4]和[5, 1]两部分。</p></li><li><p>将[3, 2, 4]分成[3, 2]和[4]两部分。</p></li><li><p>将[3, 2]分成[3]和[2]两部分，然后合并成[2, 3]。</p></li><li><p>将[2, 3]和[4]合并成[2, 3, 4]。</p></li><li><p>将[5, 1]分成[5]和[1]两部分，然后合并成[1, 5]。</p></li><li><p>将[2, 3, 4]和[1, 5]合并成[1, 2, 3, 4, 5]。</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    il <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    ir <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>il <span class="token operator">&lt;</span> left<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> ir <span class="token operator">&lt;</span> right<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span>il<span class="token punctuation">]</span> <span class="token operator">&lt;</span> right<span class="token punctuation">[</span>ir<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span>il<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">[</span>ir<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>il<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>ir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 merge 函数，合并两个已经按升序排好序的数组。首先，比较两个数组的第一个元素，将其中较小的一个放入 result 数组；然后，将其中较大的一个与另一个数组的第二个元素进行比较，再将其中较小的一个放入 result 数组的第二个位置。以此类推，直到一个数组的所有元素都进入 result 数组为止，再将另一个数组剩下的元素接着 result 数组后面返回（使用 concat 方法）。</p><p>有了 merge 函数，就可以对任意数组排序了。基本方法是将数组不断地拆成两半，直到每一半只包含零个元素或一个元素为止，然后就用 merge 函数，将拆成两半的数组不断合并，直到合并成一整个排序完成的数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">myArray</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>myArray<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> myArray<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">var</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>myArray<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    left <span class="token operator">=</span> myArray<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">,</span>
    right <span class="token operator">=</span> myArray<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>middle<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码有一个问题，就是返回的是一个全新的数组，会多占用空间。因此，修改上面的函数，使之在原地排序，不多占用空间。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">myArray</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>myArray<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> myArray<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">var</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>myArray<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    left <span class="token operator">=</span> myArray<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">,</span>
    right <span class="token operator">=</span> myArray<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>middle<span class="token punctuation">)</span><span class="token punctuation">,</span>
    params <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 在返回的数组头部，添加两个元素，第一个是0，第二个是返回的数组长度</span>
  params<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> myArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// splice用来替换数组元素，它接受多个参数，</span>
  <span class="token comment">// 第一个是开始替换的位置，第二个是需要替换的个数，后面就是所有新加入的元素。</span>
  <span class="token comment">// 因为splice不接受数组作为参数，所以采用apply的写法。</span>
  <span class="token comment">// 这一句的意思就是原来的myArray数组替换成排序后的myArray</span>
  myArray<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>myArray<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 返回排序后的数组</span>
  <span class="token keyword">return</span> myArray<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="快速排序" tabindex="-1"><a class="header-anchor" href="#快速排序" aria-hidden="true">#</a> 快速排序</h2><p>快速排序（quick sort）是公认最快的排序算法之一，有着广泛的应用。</p><p>它的基本思想很简单：先确定一个“支点”（pivot），将所有小于“支点”的值都放在该点的左侧，大于“支点”的值都放在该点的右侧，然后对左右两侧不断重复这个过程，直到所有排序完成。</p><p>具体做法是：</p><ol><li><p>确定“支点”（pivot）。虽然数组中任意一个值都能作为“支点”，但通常是取数组的中间值。</p></li><li><p>建立两端的指针。左侧的指针指向数组的第一个元素，右侧的指针指向数组的最后一个元素。</p></li><li><p>左侧指针的当前值与“支点”进行比较，如果小于“支点”则指针向后移动一位，否则指针停在原地。</p></li><li><p>右侧指针的当前值与“支点”进行比较，如果大于“支点”则指针向前移动一位，否则指针停在原地。</p></li><li><p>左侧指针的位置与右侧指针的位置进行比较，如果前者大于等于后者，则本次排序结束；否则，左侧指针的值与右侧指针的值相交换。</p></li><li><p>对左右两侧重复第 2 至 5 步。</p></li></ol><p>以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：</p><ol><li><p>选择中间值“4”作为“支点”。</p></li><li><p>第一个元素 3 小于 4，左侧指针向后移动一位；第二个元素 2 小于 4，左侧指针向后移动一位；第三个元素 4 等于 4，左侧指针停在这个位置（数组的第 2 位）。</p></li><li><p>倒数第一个元素 1 小于 4，右侧指针停在这个位置（数组的第 4 位）。</p></li><li><p>左侧指针的位置（2）小于右侧指针的位置（4），两个位置的值互换，数组变成[3, 2, 1, 5, 4]。</p></li><li><p>左侧指针向后移动一位，第四个元素 5 大于 4，左侧指针停在这个位置（数组的第 3 位）。</p></li><li><p>右侧指针向前移动一位，第四个元素 5 大于 4，右侧指针移动向前移动一位，第三个元素 1 小于 4，右侧指针停在这个位置（数组的第 3 位）。</p></li><li><p>左侧指针的位置（3）大于右侧指针的位置（2），本次排序结束。</p></li><li><p>对 [3, 2, 1]和[5, 4]两部分各自不断重复上述步骤，直到排序完成。</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 用于互换两个位置的值</span>
<span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">myArray<span class="token punctuation">,</span> firstIndex<span class="token punctuation">,</span> secondIndex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> temp <span class="token operator">=</span> myArray<span class="token punctuation">[</span>firstIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
  myArray<span class="token punctuation">[</span>firstIndex<span class="token punctuation">]</span> <span class="token operator">=</span> myArray<span class="token punctuation">[</span>secondIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
  myArray<span class="token punctuation">[</span>secondIndex<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 完成一轮排序</span>
<span class="token keyword">function</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token parameter">myArray<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> pivot <span class="token operator">=</span> myArray<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">+</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    i <span class="token operator">=</span> left<span class="token punctuation">,</span>
    j <span class="token operator">=</span> right<span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>myArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>myArray<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      j<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">swap</span><span class="token punctuation">(</span>myArray<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
      i<span class="token operator">++</span><span class="token punctuation">;</span>
      j<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 递归上面的过程，完成整个排序</span>
<span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">myArray<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>myArray<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> myArray<span class="token punctuation">;</span>

  left <span class="token operator">=</span> <span class="token keyword">typeof</span> left <span class="token operator">!==</span> <span class="token string">&quot;number&quot;</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> left<span class="token punctuation">;</span>

  right <span class="token operator">=</span> <span class="token keyword">typeof</span> right <span class="token operator">!==</span> <span class="token string">&quot;number&quot;</span> <span class="token operator">?</span> myArray<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> right<span class="token punctuation">;</span>

  <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>myArray<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">quickSort</span><span class="token punctuation">(</span>myArray<span class="token punctuation">,</span> left<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">quickSort</span><span class="token punctuation">(</span>myArray<span class="token punctuation">,</span> index<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> myArray<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46),m={href:"https://javascript.ruanyifeng.com/library/sorting.html#toc1",target:"_blank",rel:"noopener noreferrer"};function b(y,h){const t=e("router-link"),o=e("ExternalLinkIcon");return l(),i("div",null,[d,n("nav",k,[n("ul",null,[n("li",null,[a(t,{to:"#复杂度汇总"},{default:p(()=>[s("复杂度汇总")]),_:1})]),n("li",null,[a(t,{to:"#冒泡排序"},{default:p(()=>[s("冒泡排序")]),_:1})]),n("li",null,[a(t,{to:"#选择排序"},{default:p(()=>[s("选择排序")]),_:1})]),n("li",null,[a(t,{to:"#插入排序"},{default:p(()=>[s("插入排序")]),_:1})]),n("li",null,[a(t,{to:"#合并排序"},{default:p(()=>[s("合并排序")]),_:1})]),n("li",null,[a(t,{to:"#快速排序"},{default:p(()=>[s("快速排序")]),_:1})])])]),v,n("p",null,[s("参考"),n("a",m,[a(o)])])])}const g=c(r,[["render",b],["__file","sequence.html.vue"]]);export{g as default};
