import{_ as c,M as t,p as l,q as i,R as n,t as s,N as a,U as r,a1 as p}from"./framework-201fec1f.js";const u={},d=p(`<h1 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h1><blockquote><p>数据类型介绍</p></blockquote><h2 id="基本数据类型-原始" tabindex="-1"><a class="header-anchor" href="#基本数据类型-原始" aria-hidden="true">#</a> 基本数据类型(原始)</h2><ul><li><code>undefined</code> 用于未定义的值 —— 只有一个 undefined 值的独立类型</li><li><code>null</code> 用于未知的值 —— 只有一个 null 值的独立类型</li><li><code>number</code> 用于任何类型的数字：整数或浮点数，在 ±(253-1) 范围内的整数</li><li><code>boolean</code> 用于 true 和 false</li><li><code>string</code> 用于字符串：一个字符串可以包含 0 个或多个字符，所以没有单独的单字符类型</li><li><code>symbol</code> 用于唯一的标识符(ES6)</li><li><code>bigint</code> 用于任意长度的整数(ES2020)</li></ul><h3 id="基本类型包装对象" tabindex="-1"><a class="header-anchor" href="#基本类型包装对象" aria-hidden="true">#</a> 基本类型包装对象</h3><p>除<code>undefined</code>、<code>null</code>外，所有基本类型都有其对应的包装对象</p><ul><li><code>Number</code> 数值基本类型</li><li><code>Boolean</code> 布尔值基本类型</li><li><code>String</code> 字符串基本类型</li><li><code>Symbol</code> 字面量基本类型</li></ul><p>这个包裹对象的<code>valueOf()</code>方法返回基本类型值</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>除 Object 以外的所有类型都是不可变的（值本身无法被改变）。例如，与 C 语言不同，JavaScript 中字符串是不可变的（译注：如，JavaScript 中对字符串的操作一定返回了一个新字符串，原始字符串并没有被改变）。我们称这些类型的值为“原始值”</p></div><h2 id="复杂数据类型" tabindex="-1"><a class="header-anchor" href="#复杂数据类型" aria-hidden="true">#</a> 复杂数据类型</h2><ul><li><code>Object</code></li></ul><h2 id="判断数据类型" tabindex="-1"><a class="header-anchor" href="#判断数据类型" aria-hidden="true">#</a> 判断数据类型</h2><h3 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> typeof</h3><p>思考下面代码的输出：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;undefined&#39;</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;null&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;boolean&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;number&#39;</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;array&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;bigInt&#39;</span><span class="token operator">:</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;string&#39;</span><span class="token operator">:</span> <span class="token string">&#39;str&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;symbol&#39;</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;sym&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;funtion&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;object&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;objectString&#39;</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;str&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;objectNumber&#39;</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看结果</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;undefined&#39;</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>             <span class="token comment">// undefined</span>
  <span class="token string-property property">&#39;null&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                       <span class="token comment">// object (历史原因)</span>
  <span class="token string-property property">&#39;boolean&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token comment">// boolean</span>
  <span class="token string-property property">&#39;number&#39;</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>                      <span class="token comment">// number</span>
  <span class="token string-property property">&#39;array&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token comment">// object</span>
  <span class="token string-property property">&#39;bigInt&#39;</span><span class="token operator">:</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token comment">// bigint</span>
  <span class="token string-property property">&#39;string&#39;</span><span class="token operator">:</span> <span class="token string">&#39;str&#39;</span><span class="token punctuation">,</span>                    <span class="token comment">// string</span>
  <span class="token string-property property">&#39;symbol&#39;</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;sym&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">// symbol</span>
  <span class="token string-property property">&#39;funtion&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token comment">// function</span>
  <span class="token string-property property">&#39;object&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                       <span class="token comment">// object</span>
  <span class="token string-property property">&#39;objectString&#39;</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;str&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// object</span>
  <span class="token string-property property">&#39;objectNumber&#39;</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>     <span class="token comment">// object</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结论： <code>typeof</code> 适用于除(null)的基本数据类型(也叫原始类型)，换句话说，任何从 <code>Object</code> 派生出来的结构类型，使用 <code>typeof</code> 是不起作用的，因为总是会得到 &quot;object&quot;</p></details><h3 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof" aria-hidden="true">#</a> instanceof</h3><p>思考下面代码的输出：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;hello world&#39;</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span>
<span class="token number">123</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span>
<span class="token keyword">undefined</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>
<span class="token keyword">null</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>
<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Date</span>
<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>
<span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Car</span>
<span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看结果</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;hello world&#39;</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token comment">// false</span>
<span class="token number">123</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span>           <span class="token comment">// false</span>
<span class="token keyword">undefined</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>     <span class="token comment">// false</span>
<span class="token keyword">null</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>          <span class="token comment">// false</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span>             <span class="token comment">// true</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>            <span class="token comment">// true</span>
<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Date</span>      <span class="token comment">// true</span>
<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>    <span class="token comment">// true</span>
<span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 
<span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Car</span>        <span class="token comment">// true</span>
<span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>     <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结论： <code>instanceof</code> 检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上,只能用于对象，即基本类型无法使用。</p></details>`,20),k=n("code",null,"protype",-1),m=p(`<h4 id="instanceof-实现" tabindex="-1"><a class="header-anchor" href="#instanceof-实现" aria-hidden="true">#</a> instanceof 实现</h4><p>以<code>[] instanceof Object</code>为例</p><ol><li>[]数组对象的<code>__proto__</code>属性指向<code>Array.prototype</code></li><li><code>Array.prototype.__proto__</code>指向<code>Object.prototype</code></li><li><code>Object.prototype.__proto__</code>指向<code>null</code></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myInstanceof</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> l <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">.</span>__proto__
  <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token class-name">B</span><span class="token punctuation">.</span>prototype
  <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">===</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">myInstanceof</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><p>思考下面代码的输出：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object

<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object

<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">1</span>
num<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Number

<span class="token keyword">const</span> bool <span class="token operator">=</span> <span class="token boolean">false</span>
bool<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Boolean

<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
str<span class="token punctuation">.</span>constructor <span class="token operator">===</span> String

<span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
func<span class="token punctuation">.</span>contructor <span class="token operator">===</span> Function

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>contructor<span class="token punctuation">)</span>

<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">null</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>contructor<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>点击查看结果</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array      <span class="token comment">// true</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object     <span class="token comment">// true</span>

<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object     <span class="token comment">// true</span>

<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">1</span>
num<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Number    <span class="token comment">// true</span>

<span class="token keyword">const</span> bool <span class="token operator">=</span> <span class="token boolean">false</span>
bool<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Boolean  <span class="token comment">// true</span>

<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
str<span class="token punctuation">.</span>constructor <span class="token operator">===</span> String    <span class="token comment">// true</span>

<span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
func<span class="token punctuation">.</span>contructor <span class="token operator">===</span> Function  <span class="token comment">// true</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>contructor<span class="token punctuation">)</span>     <span class="token comment">// Uncaught TypeError: Cannot read property &#39;contructor&#39; of undefined</span>

<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">null</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>contructor<span class="token punctuation">)</span>     <span class="token comment">// Uncaught TypeError: Cannot read property &#39;contructor&#39; of undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结论：<code>contructor</code>与 <code>typeof</code>、<code>instanceof</code>不同， <code>typeof</code>、<code>instanceof</code>属于<code>表达式和运算符</code>, 而<code>contructor</code>关系到<code>Object</code>对象下的。 一般场景下可以满足使用需求，但针对<code>null</code>、<code>undefined</code>会报错。</p></details><h3 id="object-prototype-tostring" tabindex="-1"><a class="header-anchor" href="#object-prototype-tostring" aria-hidden="true">#</a> Object.prototype.toString</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>es6 新写法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">,</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">getType</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>        <span class="token comment">// Undefined</span>
<span class="token function">getType</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>             <span class="token comment">// Null</span>
<span class="token function">getType</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>              <span class="token comment">// Number</span>
<span class="token function">getType</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// String</span>
<span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>               <span class="token comment">// Array</span>
<span class="token function">getType</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>             <span class="token comment">// Boolean</span>
<span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>               <span class="token comment">// Object</span>
<span class="token function">getType</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// Function</span>
<span class="token function">getType</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">)</span>         <span class="token comment">// Date</span>
<span class="token function">getType</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">// RegExp</span>
<span class="token function">getType</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">// Error</span>
<span class="token function">getType</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span>         <span class="token comment">// HTMLDocument</span>
<span class="token function">getType</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span>           <span class="token comment">// Window</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>需要注意的是，必须通过Object.prototype.toString.call来获取，而不能直接 new Date().toString(), 从原型链的角度讲，所有对象的原型链最终都指向了Object, 按照JS变量查找规则，其他对象应该也可以直接访问到Object的toString方法，而事实上，大部分的对象都实现了自身的toString方法，这样就可能会导致Object的toString被终止查找，因此要用call来强制执行Object的toString方法</p></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li><code>typeof</code> 准确判断基本数据类型，但针对引用类型(除<code>function</code>外)都返回<code>object</code></li><li><code>instanceof</code> 已知是引用类型的可以使用（基于原型链）</li><li><code>constructor</code> 可以使用，但<code>constructor</code>易变，不可信赖(为了规范，在重写对象原型时一般都需要重新给constructor赋值，以保证实例对象的类型不被改写), 无法判断<code>null</code>、<code>undefined</code></li><li><code>Object.prototype.toString</code> 通用但稍显繁琐</li></ul><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,15),v={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures",target:"_blank",rel:"noopener noreferrer"},b={href:"https://juejin.cn/post/6844903623231537159",target:"_blank",rel:"noopener noreferrer"};function y(f,g){const o=t("RouterLink"),e=t("ExternalLinkIcon");return l(),i("div",null,[d,n("p",null,[s("更多关于"),k,s("知识请查阅"),a(o,{to:"/base/javascript/prototype.html"},{default:r(()=>[s("prototype")]),_:1})]),m,n("ul",null,[n("li",null,[n("a",v,[s("MDN"),a(e)])]),n("li",null,[n("a",b,[s("JS数据类型"),a(e)])])])])}const w=c(u,[["render",y],["__file","data-type.html.vue"]]);export{w as default};
