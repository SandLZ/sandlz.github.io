import{_ as n,p as s,q as a,a1 as t}from"./framework-201fec1f.js";const o={},e=t(`<h1 id="react-router" tabindex="-1"><a class="header-anchor" href="#react-router" aria-hidden="true">#</a> React Router</h1><blockquote><p>React Router 中有三种类型的组件： <strong>router components</strong>, <strong>route matching components</strong>，和 <strong>navigation components</strong>。你在 Web 应用程序中使用的所有组件都应该从 react-router-dom 中导入。</p></blockquote><h2 id="路由" tabindex="-1"><a class="header-anchor" href="#路由" aria-hidden="true">#</a> 路由</h2><p>每个 React Router 应用程序的核心应该是一个 <code>router</code> 组件。</p><p>对于 Web 项目，react-router-dom 提供了 <code>&lt;BrowserRouter&gt;</code> 和 <code>&lt;HashRouter&gt;</code> 路由。这两个路由都会为你创建一个专门的 history 对象。</p><p>一般来说，如果你<strong>有一个响应请求的服务器</strong>，则你应该使用 <code>&lt;BrowserRouter&gt;</code> ，如果你使用的是<strong>静态文件的服务器</strong>，则应该使用 <code>&lt;HashRouter&gt;</code> 。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router-dom&quot;</span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>BrowserRouter<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>BrowserRouter<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  holder
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="route-匹配" tabindex="-1"><a class="header-anchor" href="#route-匹配" aria-hidden="true">#</a> Route 匹配</h2><p>有两个路由匹配组件： <code>&lt;Route&gt;</code> 和 <code>&lt;Switch&gt;</code> 。</p><p>路由匹配是通过比较 <code>&lt;Route&gt;</code> 的 path 属性和当前地址的 pathname 来实现的。当一个 <code>&lt;Route&gt;</code> 匹配成功时，它将渲染其内容，当它不匹配时就会渲染 null。没有路径的 <code>&lt;Route&gt;</code> 将始终被匹配。</p><p>你可以在任何你希望根据地址渲染内容的地方添加 <code>&lt;Route&gt;</code> 。列出多个可能的 <code>&lt;Route&gt;</code> 并排列出来往往很有意义。 <code>&lt;Switch&gt;</code> 用于将 <code>&lt;Route&gt;</code> 分组。</p><p><code>&lt;Switch&gt;</code> 不是分组 <code>&lt;Route&gt;</code> 所必须的，但他通常很有用。 一个 <code>&lt;Switch&gt;</code> 会遍历其所有的子 <code>&lt;Route&gt;</code> 元素，并<strong>仅渲染与当前地址匹配的第一个元素</strong>。 这有助于多个路由的路径匹配相同的路径名，当动画在路由之间过渡，且没有路由与当前地址匹配（所以你可以渲染一个 “404” 组件）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Route<span class="token punctuation">,</span> Switch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router-dom&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// when location = { pathname: &#39;/about&#39; }</span>
<span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&#39;/about&#39;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token comment">// renders &lt;About/&gt;</span>
<span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&#39;/contact&#39;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Contact<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token comment">// renders null</span>
<span class="token operator">&lt;</span>Route component<span class="token operator">=</span><span class="token punctuation">{</span>Always<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token comment">// renders &lt;Always/&gt;</span>

<span class="token operator">&lt;</span>Switch<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/contact&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Contact<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>Switch<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/contact&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Contact<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">{</span><span class="token comment">/* when none of the above match, &lt;NoMatch&gt; will be rendered */</span><span class="token punctuation">}</span>
  <span class="token operator">&lt;</span>Route component<span class="token operator">=</span><span class="token punctuation">{</span>NoMatch<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路由渲染属性" tabindex="-1"><a class="header-anchor" href="#路由渲染属性" aria-hidden="true">#</a> 路由渲染属性</h2><p>你有三个属性来给 <code>&lt;Route&gt;</code> 渲染组件: <strong>component</strong> ，<strong>render</strong>，和 <strong>children</strong> 。你可以查看 <code>&lt;Route&gt;</code> 文档 来了解它们的更多信息，但在这我们将重点关注 <strong>component</strong> 和 <strong>render</strong> 因为这几乎是你总会用到的两个。</p><p>component 应该在你想渲染现存组件时使用 （ React.Component 或一个无状态组件）。render，只有在必须将范围内的变量传递给要渲染的组件时才能使用。你不应该使用具有内联函数的 component 属性来传递范围内的变量，因为会出现<strong>不必要的卸载/重载组件</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> someVariable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Switch<span class="token operator">&gt;</span>
      <span class="token punctuation">{</span><span class="token comment">/* these are good */</span><span class="token punctuation">}</span>
      <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Route
        path<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span>
        render<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>About <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> extra<span class="token operator">=</span><span class="token punctuation">{</span>someVariable<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span>
      <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token punctuation">{</span><span class="token comment">/* do not do this */</span><span class="token punctuation">}</span>
      <span class="token operator">&lt;</span>Route
        path<span class="token operator">=</span><span class="token string">&quot;/contact&quot;</span>
        component<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>Contact <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> extra<span class="token operator">=</span><span class="token punctuation">{</span>someVariable<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span>
      <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="导航" tabindex="-1"><a class="header-anchor" href="#导航" aria-hidden="true">#</a> 导航</h2><p>React Router 提供了一个 <code>&lt;Link&gt;</code> 组件来在你的应用程序中创建链接。无论你在何处渲染一个 <code>&lt;Link&gt;</code> ，都会在应用程序的 HTML 中渲染锚 （<code>&lt;a&gt;</code>）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token operator">&gt;</span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">&gt;</span>
<span class="token comment">// &lt;a href=&#39;/&#39;&gt;Home&lt;/a&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;NavLink&gt;</code> 是一种特殊类型的 <code>&lt;Link&gt;</code> 当它的 <strong>to</strong> 属性与当前地址匹配时，可以将其定义为“活跃的”。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// location = { pathname: &#39;/react&#39; }</span>
<span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span><span class="token string">&quot;/react&quot;</span> activeClassName<span class="token operator">=</span><span class="token string">&quot;hurray&quot;</span><span class="token operator">&gt;</span>
  React
<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">&gt;</span>
<span class="token comment">// &lt;a href=&#39;/react&#39; className=&#39;hurray&#39;&gt;React&lt;/a&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你想强制导航时，你可以渲染一个 <code>&lt;Redirect&gt;</code>。当一个 <code>&lt;Redirect&gt;</code> 渲染时，它将使用它的 <strong>to</strong> 属性进行定向。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">&quot;/login&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,24),p=[e];function c(r,l){return s(),a("div",null,p)}const u=n(o,[["render",c],["__file","base.html.vue"]]);export{u as default};
