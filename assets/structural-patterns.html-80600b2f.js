import{_ as p,M as o,p as i,q as l,R as n,N as t,U as e,t as s,a1 as c}from"./framework-201fec1f.js";const u={},r=n("h1",{id:"结构型模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#结构型模式","aria-hidden":"true"},"#"),s(" 结构型模式")],-1),d=n("blockquote",null,[n("p",null,"结构型模式介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。")],-1),k={class:"table-of-contents"},v=c(`<h2 id="_1-适配器-adapter" tabindex="-1"><a class="header-anchor" href="#_1-适配器-adapter" aria-hidden="true">#</a> 1. 适配器（Adapter）</h2><blockquote><p>适配器模式是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。</p></blockquote><h3 id="_1-1-方案" tabindex="-1"><a class="header-anchor" href="#_1-1-方案" aria-hidden="true">#</a> 1.1 方案</h3><ol><li><p>确保至少有两个类的接口不兼容：</p><ul><li>一个无法修改 （通常是第三方、 遗留系统或者存在众多已有依赖的类） 的功能性服务类。</li><li>一个或多个将受益于使用服务类的客户端类。</li></ul></li><li><p>声明客户端接口， 描述客户端如何与服务交互。</p></li><li><p>创建遵循客户端接口的适配器类。 所有方法暂时都为空。</p></li></ol><p>4。 在适配器类中添加一个成员变量用于保存对于服务对象的引用。 通常情况下会通过构造函数对该成员变量进行初始化， 但有时在调用其方法时将该变量传递给适配器会更方便。</p><ol start="5"><li><p>依次实现适配器类客户端接口的所有方法。 适配器会将实际工作委派给服务对象， 自身只负责接口或数据格式的转换。</p></li><li><p>客户端必须通过客户端接口使用适配器。 这样一来， 你就可以在不影响客户端代码的情况下修改或扩展适配器。</p></li></ol><h3 id="_1-2-场景" tabindex="-1"><a class="header-anchor" href="#_1-2-场景" aria-hidden="true">#</a> 1.2 场景</h3><ul><li>希望使用某个类， 但是其接口与其他代码不兼容时 <ul><li>适配器模式允许你创建一个中间层类， 其可作为代码与遗留类、 第三方类或提供怪异接口的类之间的转换器。</li></ul></li><li>需要复用这样一些类， 他们处于同一个继承体系， 并且他们又有了额外的一些共同的方法， 但是这些共同的方法不是所有在这一继承体系中的子类所具有的共性 <ul><li>将缺失功能添加到一个适配器类中是一种优雅得多的解决方案</li></ul></li></ul><h3 id="_1-3-代码示例" tabindex="-1"><a class="header-anchor" href="#_1-3-代码示例" aria-hidden="true">#</a> 1.3 代码示例</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&#39;Target: The default target\\&#39;s behavior.&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Adaptee</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&#39;.eetpadA eht fo roivaheb laicepS&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * The Adapter makes the Adaptee&#39;s interface compatible with the Target&#39;s
 * interface.
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">extends</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> adaptee<span class="token operator">:</span> Adaptee<span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span>adaptee<span class="token operator">:</span> Adaptee<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>adaptee <span class="token operator">=</span> adaptee<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adaptee<span class="token punctuation">.</span><span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Adapter: (TRANSLATED) </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">clientCode</span><span class="token punctuation">(</span>target<span class="token operator">:</span> Target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Client: I can work just fine with the Target objects:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Target</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">clientCode</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> adaptee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Adaptee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Client: The Adaptee class has a weird interface. See, I don\\&#39;t understand it:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Adaptee: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>adaptee<span class="token punctuation">.</span><span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Client: But I can work with it via the Adapter:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span>adaptee<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">clientCode</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Client: I can work just fine with the Target objects:
Target: The default target&#39;s behavior.

Client: The Adaptee class has a weird interface. See, I don&#39;t understand it:
Adaptee: .eetpadA eht fo roivaheb laicepS

Client: But I can work with it via the Adapter:
Adapter: (TRANSLATED) Special behavior of the Adaptee.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-桥接-bridge" tabindex="-1"><a class="header-anchor" href="#_2-桥接-bridge" aria-hidden="true">#</a> 2. 桥接 （Bridge）</h2><blockquote><p>桥接模式是一种结构型设计模式， 可将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构， 从而能在开发时分别使用。</p></blockquote><p>层次结构中的第一层 （通常称为抽象部分） 将包含对第二层 （实现部分） 对象的引用。 抽象部分将能将一些 （有时是绝大部分） 对自己的调用委派给实现部分的对象。 所有的实现部分都有一个通用接口， 因此它们能在抽象部分内部相互替换。</p><h3 id="_2-1-方案" tabindex="-1"><a class="header-anchor" href="#_2-1-方案" aria-hidden="true">#</a> 2.1 方案</h3><ol><li><p>明确类中独立的维度。 独立的概念可能是： 抽象/平台， 域/基础设施， 前端/后端或接口/实现。</p></li><li><p>了解客户端的业务需求， 并在抽象基类中定义它们。</p></li><li><p>确定在所有平台上都可执行的业务。 并在通用实现接口中声明抽象部分所需的业务。</p></li><li><p>为你域内的所有平台创建实现类， 但需确保它们遵循实现部分的接口。</p></li><li><p>在抽象类中添加指向实现类型的引用成员变量。 抽象部分会将大部分工作委派给该成员变量所指向的实现对象。</p></li><li><p>如果你的高层逻辑有多个变体， 则可通过扩展抽象基类为每个变体创建一个精确抽象。</p></li><li><p>客户端代码必须将实现对象传递给抽象部分的构造函数才能使其能够相互关联。 此后， 客户端只需与抽象对象进行交互， 无需和实现对象打交道。</p></li></ol><h3 id="_2-2-场景" tabindex="-1"><a class="header-anchor" href="#_2-2-场景" aria-hidden="true">#</a> 2.2 场景</h3><ul><li>要拆分或重组一个具有多重功能的庞杂类 （例如能与多个数据库服务器进行交互的类），</li><li>在几个独立维度上扩展一个类</li><li>需要在运行时切换不同实现方法 <ul><li>顺便提一句， 最后一点是很多人混淆<strong>桥接模式</strong>和<strong>策略模式</strong>的主要原因。 记住， 设计模式并不仅是一种对类进行组织的方式， 它还能用于沟通意图和解决问题</li></ul></li></ul><h3 id="_2-3-代码示例" tabindex="-1"><a class="header-anchor" href="#_2-3-代码示例" aria-hidden="true">#</a> 2.3 代码示例</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Abstraction</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> implementation<span class="token operator">:</span> Implementation<span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span>implementation<span class="token operator">:</span> Implementation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>implementation <span class="token operator">=</span> implementation<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>implementation<span class="token punctuation">.</span><span class="token function">operationImplementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Abstraction: Base operation with:\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ExtendedAbstraction</span> <span class="token keyword">extends</span> <span class="token class-name">Abstraction</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>implementation<span class="token punctuation">.</span><span class="token function">operationImplementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ExtendedAbstraction: Extended operation with:\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Implementation</span> <span class="token punctuation">{</span>
    <span class="token function">operationImplementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ConcreteImplementationA</span> <span class="token keyword">implements</span> <span class="token class-name">Implementation</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">operationImplementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&#39;ConcreteImplementationA: Here\\&#39;s the result on the platform A.&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ConcreteImplementationB</span> <span class="token keyword">implements</span> <span class="token class-name">Implementation</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">operationImplementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&#39;ConcreteImplementationB: Here\\&#39;s the result on the platform B.&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">clientCode</span><span class="token punctuation">(</span>abstraction<span class="token operator">:</span> Abstraction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ..</span>

    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>abstraction<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ..</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> implementation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteImplementationA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> abstraction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Abstraction</span><span class="token punctuation">(</span>implementation<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">clientCode</span><span class="token punctuation">(</span>abstraction<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

implementation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteImplementationB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
abstraction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtendedAbstraction</span><span class="token punctuation">(</span>implementation<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">clientCode</span><span class="token punctuation">(</span>abstraction<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-组合-composite" tabindex="-1"><a class="header-anchor" href="#_3-组合-composite" aria-hidden="true">#</a> 3. 组合（Composite）</h2><blockquote><p>亦称： 对象树、Object Tree、Composite</p></blockquote><blockquote><p>组合模式是一种结构型设计模式， 你可以使用它将对象组合成树状结构， 并且能像使用独立对象一样使用它们。</p></blockquote><h2 id="_4-装饰-decorator" tabindex="-1"><a class="header-anchor" href="#_4-装饰-decorator" aria-hidden="true">#</a> 4. 装饰（Decorator）</h2><h2 id="_5-外观-facade" tabindex="-1"><a class="header-anchor" href="#_5-外观-facade" aria-hidden="true">#</a> 5. 外观（Facade）</h2><h2 id="_6-享元-flyweight" tabindex="-1"><a class="header-anchor" href="#_6-享元-flyweight" aria-hidden="true">#</a> 6. 享元（Flyweight）</h2><h2 id="_7-代理-proxy" tabindex="-1"><a class="header-anchor" href="#_7-代理-proxy" aria-hidden="true">#</a> 7. 代理（Proxy）</h2>`,28);function m(b,h){const a=o("router-link");return i(),l("div",null,[r,d,n("nav",k,[n("ul",null,[n("li",null,[t(a,{to:"#_1-适配器-adapter"},{default:e(()=>[s("1. 适配器（Adapter）")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_1-1-方案"},{default:e(()=>[s("1.1 方案")]),_:1})]),n("li",null,[t(a,{to:"#_1-2-场景"},{default:e(()=>[s("1.2 场景")]),_:1})]),n("li",null,[t(a,{to:"#_1-3-代码示例"},{default:e(()=>[s("1.3 代码示例")]),_:1})])])]),n("li",null,[t(a,{to:"#_2-桥接-bridge"},{default:e(()=>[s("2. 桥接 （Bridge）")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_2-1-方案"},{default:e(()=>[s("2.1 方案")]),_:1})]),n("li",null,[t(a,{to:"#_2-2-场景"},{default:e(()=>[s("2.2 场景")]),_:1})]),n("li",null,[t(a,{to:"#_2-3-代码示例"},{default:e(()=>[s("2.3 代码示例")]),_:1})])])]),n("li",null,[t(a,{to:"#_3-组合-composite"},{default:e(()=>[s("3. 组合（Composite）")]),_:1})]),n("li",null,[t(a,{to:"#_4-装饰-decorator"},{default:e(()=>[s("4. 装饰（Decorator）")]),_:1})]),n("li",null,[t(a,{to:"#_5-外观-facade"},{default:e(()=>[s("5. 外观（Facade）")]),_:1})]),n("li",null,[t(a,{to:"#_6-享元-flyweight"},{default:e(()=>[s("6. 享元（Flyweight）")]),_:1})]),n("li",null,[t(a,{to:"#_7-代理-proxy"},{default:e(()=>[s("7. 代理（Proxy）")]),_:1})])])]),v])}const g=p(u,[["render",m],["__file","structural-patterns.html.vue"]]);export{g as default};
