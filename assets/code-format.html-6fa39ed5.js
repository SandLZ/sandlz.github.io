import{_ as i,M as o,p as r,q as l,R as n,N as s,U as a,t as e,a1 as c}from"./framework-201fec1f.js";const p={},d=n("h1",{id:"代码格式化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#代码格式化","aria-hidden":"true"},"#"),e(" 代码格式化")],-1),u=n("blockquote",null,[n("p",null,"统一团队代码风格。")],-1),g=n("p",null,[e("本文将使用"),n("code",null,"create-react-app"),e(" 创建的React项目，说明相关概念及演示如何集成一些列格式化工具，覆盖开发部分开发过程。")],-1),m={class:"table-of-contents"},v=c(`<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">extends</th><th style="text-align:center;">Plugins</th></tr></thead><tbody><tr><td style="text-align:center;">命名</td><td style="text-align:center;"><code>eslint-config-\${name}</code><br><code>@scope/eslint-config\${name}</code></td><td style="text-align:center;"><code>eslint-plugin-\${name}</code> <br><code>@scope/eslint-plugin-\${name}</code></td></tr><tr><td style="text-align:center;">用途</td><td style="text-align:center;">扩展: 集成一个个配置方案的最佳实践，即别人配置好的.eslintrc.js</td><td style="text-align:center;">插件: 添加插件中的规则<br> 必有：一堆自定义的规则的集合 <br>可能有：总结的最佳实践</td></tr><tr><td style="text-align:center;">配置</td><td style="text-align:center;">全称：<code>eslint-config-prettier</code> <br>缩写：<code>prettier</code> <br>插件中的config： <code>plugin:plugin-name/\${configName}</code> <br>如:<code>plugin:prettier/recommended</code></td><td style="text-align:center;">全称：<code>eslint-plugin-prettier</code> <br>缩写：<code>prettier</code></td></tr><tr><td style="text-align:center;">用法</td><td style="text-align:center;"><code>extends</code>中配置<br>后面的配置优先级更高</td><td style="text-align:center;">- <code>extends</code>：&quot;plugin:prettier/recommended&quot;<br>- <code>plugins</code>:&quot;prettier&quot;, 具体使用哪些规则需在<code>rules</code>中配置</td></tr></tbody></table><p>下图展示 <code>eslint-plugin-react</code> 支持的规则集合</p><div><img src="https://github.com/sandlz/images/raw/master/uPic/k9gKeV.png" alt="eslint-plugin-react 示例"></div><h2 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint" aria-hidden="true">#</a> ESLint</h2><p><strong>Eslint</strong> 是一个可以检验代码，并给出报告的工具。它的目标是保证代码的一致性，避免错误。Eslint 为我们提供了 <strong>ECMAScript/JavaScript</strong> 规范的代码校验，我们可以根据个人/团队的代码风格进行配置，也可以使用开源的配置方案.</p><blockquote><p>本文会采用 <code>eslint-config-airbnb</code> 来配置。</p></blockquote><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># create-react-app 方式已安装ESLint</span>
<span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> eslint
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h3><p>可选的配置文件方式（已按优先级排序）</p><ol><li><code>.eslintrc.js</code>(优先使用此方式)</li><li><code>.eslintrc.cjs</code></li><li><code>.eslintrc.yaml</code></li><li><code>.eslintrc.yml</code></li><li><code>.eslintrc.json</code></li><li><code>package.json</code></li></ol><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// .eslintrc.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;react-app&#39;</span><span class="token punctuation">,</span> <span class="token comment">// react-app配置</span>
    <span class="token string">&#39;airbnb&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;plugin:react/jsx-runtime&#39;</span><span class="token punctuation">,</span> <span class="token comment">// (Prevent missing React when using JSX (react/react-in-jsx-scope))</span>
    <span class="token string">&#39;plugin:prettier/recommended&#39;</span><span class="token punctuation">,</span> <span class="token comment">// prettier推荐配置</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="prettier" tabindex="-1"><a class="header-anchor" href="#prettier" aria-hidden="true">#</a> Prettier</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># prettier 与 eslint整合</span>
<span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> eslint-plugin-prettier
<span class="token comment"># prettier(-E 指定版本)</span>
<span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> <span class="token parameter variable">-E</span> prettier
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="推荐配置" tabindex="-1"><a class="header-anchor" href="#推荐配置" aria-hidden="true">#</a> 推荐配置</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;plugin:prettier/recommended&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述配置实际会生成如下配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;prettier&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;prettier&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;prettier/prettier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;arrow-body-style&quot;</span><span class="token operator">:</span> <span class="token string">&quot;off&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;prefer-arrow-callback&quot;</span><span class="token operator">:</span> <span class="token string">&quot;off&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong><code>&quot;extends&quot;：[&quot;prettier&quot;]</code></strong> 启用 <code>eslint config prettier</code> 中的配置，这将关闭与prettier冲突的一些eslint规则</li><li><strong><code>&quot;plugins&quot;：[&quot;prettier&quot;]</code></strong> 注册此插件</li><li><strong><code>&quot;prettier/prettier&quot;：&quot;error&quot;</code></strong> 打开此插件提供的规则，该插件从ESLint中运行prettier</li><li><strong><code>&quot;arrow-body-style&quot;: &quot;off&quot;</code> &amp; <code>&quot;prefer-arrow-callback&quot;: &quot;off&quot;</code></strong>：关闭两条ESLint核心规则。</li></ul><h2 id="stylelint" tabindex="-1"><a class="header-anchor" href="#stylelint" aria-hidden="true">#</a> StyleLint</h2><h2 id="husky" tabindex="-1"><a class="header-anchor" href="#husky" aria-hidden="true">#</a> Husky</h2>`,23);function h(k,b){const t=o("router-link");return r(),l("div",null,[d,u,g,n("nav",m,[n("ul",null,[n("li",null,[s(t,{to:"#概念"},{default:a(()=>[e("概念")]),_:1})]),n("li",null,[s(t,{to:"#eslint"},{default:a(()=>[e("ESLint")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#安装"},{default:a(()=>[e("安装")]),_:1})]),n("li",null,[s(t,{to:"#配置文件"},{default:a(()=>[e("配置文件")]),_:1})]),n("li",null,[s(t,{to:"#示例"},{default:a(()=>[e("示例")]),_:1})])])]),n("li",null,[s(t,{to:"#prettier"},{default:a(()=>[e("Prettier")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#推荐配置"},{default:a(()=>[e("推荐配置")]),_:1})])])]),n("li",null,[s(t,{to:"#stylelint"},{default:a(()=>[e("StyleLint")]),_:1})]),n("li",null,[s(t,{to:"#husky"},{default:a(()=>[e("Husky")]),_:1})])])]),v])}const y=i(p,[["render",h],["__file","code-format.html.vue"]]);export{y as default};
