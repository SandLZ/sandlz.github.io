import{_ as p,M as e,p as o,q as c,R as n,t as s,N as i,a1 as a}from"./framework-201fec1f.js";const l={},u=a('<h1 id="cross-origin" tabindex="-1"><a class="header-anchor" href="#cross-origin" aria-hidden="true">#</a> Cross-Origin</h1><p><strong>协议</strong>，<strong>域名</strong>，<strong>端口</strong>，三者有一不一样，就是跨域</p><p>案例一：<code>www.baidu.com</code> 与 <code>zhidao.baidu.com</code> 是跨域</p><h2 id="如何解决跨域" tabindex="-1"><a class="header-anchor" href="#如何解决跨域" aria-hidden="true">#</a> 如何解决跨域</h2><p>目前有两种最常见的解决方案：</p>',5),r=n("li",null,[n("code",null,"CORS"),s("，在服务器端设置几个响应头，如 Access-Control-Allow-Origin: *")],-1),d=n("li",null,[n("code",null,"Reverse Proxy"),s("，在 nginx/traefik/haproxy 等反向代理服务器中设置为同一域名")],-1),k=n("code",null,"JSONP",-1),v={href:"https://github.com/shfshanyue/Daily-Question/issues/447",target:"_blank",rel:"noopener noreferrer"},m=a(`<h3 id="jsonp" tabindex="-1"><a class="header-anchor" href="#jsonp" aria-hidden="true">#</a> <code>JSONP</code></h3><p><code>JSONP</code>，全称 JSON with Padding，为了解决跨域的问题而出现。虽然它只能处理 GET 跨域，虽然现在基本上都使用 CORS 跨域</p><p><code>JSONP</code> 基于两个原理:</p><ul><li>动态创建 <code>script</code>，使用 script.src 加载请求跨过跨域</li><li><code>script.src</code> 加载的脚本内容为 JSONP: 即 <code>PADDING(JSON)</code> 格式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">jsonp_simple</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> url<span class="token punctuation">,</span> onData<span class="token punctuation">,</span> params <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span>

  <span class="token comment">// 一、默认 callback 函数为 padding</span>
  script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">callback</span><span class="token operator">:</span> <span class="token string">&#39;padding&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span>params <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>

  <span class="token comment">// 二、使用 onData 作为 window.padding 函数，接收数据</span>
  window<span class="token punctuation">[</span><span class="token string">&#39;padding&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> onData

  <span class="token comment">// 三、动态加载脚本</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 发送 JSONP 请求</span>
<span class="token function">jsonp_simple</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:10010&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">10000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">onData</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Data:&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JSONP 需要服务端进行配合，返回 JSON With Padding 数据，代码如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;querystring&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> pathname<span class="token punctuation">,</span> query <span class="token punctuation">}</span> <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
  <span class="token keyword">const</span> params <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span>

  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;shanyue&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> params<span class="token punctuation">.</span>id <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 服务端将要返回的字符串</span>
    str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>params<span class="token punctuation">.</span>callback<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">10010</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Done&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>附代码: <code>nginx</code> 关于跨域的配置</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>server <span class="token punctuation">{</span>
  listen <span class="token number">80</span>;
  server_name shanyue.tech;

  location / <span class="token punctuation">{</span>
    # 避免非root路径<span class="token number">404</span>
    try_files $uri $uri/ /index.html;
  <span class="token punctuation">}</span>

  # 解决跨域
  location /api <span class="token punctuation">{</span>
    # 或者是 http<span class="token operator">:</span><span class="token comment">//localhost:8080</span>
    proxy_pass http<span class="token operator">:</span><span class="token comment">//api.shanyue.tech;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function b(g,h){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,n("ul",null,[r,d,n("li",null,[k,s("，详解见 "),n("a",v,[s("JSONP 的原理是什么，如何实现"),i(t)])])]),m])}const f=p(l,[["render",b],["__file","cross-origin.html.vue"]]);export{f as default};
