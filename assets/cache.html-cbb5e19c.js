import{_ as a,M as l,p as o,q as r,R as e,t as d,N as c,a1 as n}from"./framework-201fec1f.js";const t={},s=n(`<h1 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存" aria-hidden="true">#</a> 缓存</h1><blockquote><p>本文主要讲述浏览器对网络请求缓存的处理</p></blockquote><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><ol><li>客户端发起 HTTP 请求；</li><li>服务端端响应头中设置缓存策略，将资源缓存到浏览器</li></ol><p>缓存分为 2 种：</p><ul><li>强缓存</li><li>协商缓存</li></ul><div><img src="https://github.com/sandlz/images/raw/master/uPic/cache.jpg" style="width:80%;"></div><h3 id="强缓存" tabindex="-1"><a class="header-anchor" href="#强缓存" aria-hidden="true">#</a> 强缓存</h3><p>特点：</p><ol><li>无需与服务端交互</li></ol><p>控制强缓存的响应头</p><ul><li><code>Expires</code></li></ul><p>Expires 是 HTTP/1.0 控制网页缓存的字段，其值为服务器返回该请求的结果缓存的到期时间，即再次发送请求时，如果客户端的时间小于 Expires 的值时，直接使用缓存结果。 到了 HTTP/1.1，Expires 已经被 Cache-Control 替代，原因在于 Expires 控制缓存的原理是<strong>使用客户端的时间与服务端返回的时间做对比</strong>，如果客户端与服务端的时间由于某些原因（时区不同；客户端和服务端有一方的时间不准确）发生误差，那么强制缓存将直接失效</p><ul><li><code>Cache-Control</code></li></ul><p>在 HTTP/1.1 中，Cache-Control 是最重要的规则，主要用于控制网页缓存，主要取值为：</p><ul><li><p>public：所有内容都将被缓存（客户端和代理服务器都可缓存）</p></li><li><p>private：所有内容只有客户端可以缓存，Cache-Control 的默认取值</p></li><li><p>no-cache：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定</p></li><li><p>no-store：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存</p></li><li><p>max-age=xxx (xxx is numeric)：缓存内容将在 xxx 秒后失效</p></li><li><p>must-revalidate：告诉浏览器、缓存服务器，本地副本过期前，可以使用本地副本；本地副本一旦过期，必须去源服务器进行有效性校验。</p></li><li><p><code>Pragma</code></p></li></ul><p>Pragma 是 HTTP/1.0 标准中定义的一个 header 属性，请求中包含 Pragma 的效果跟在头信息中定义 Cache-Control: no-cache 相同，但是 HTTP 的响应头没有明确定义这个属性，所以它不能拿来完全替代 HTTP/1.1 中定义的 Cache-control 头。通常定义 Pragma 以向后兼容基于 HTTP/1.0 的客户端。 注：以上三个响应头，优先级顺序为：Pragma&gt;Cache-Control&gt;Expires</p><h3 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存" aria-hidden="true">#</a> 协商缓存</h3><p>特点：</p><ol><li>需要与服务端发生交互，判断是否使用本地缓存的文件</li></ol><ul><li><code>ETag</code></li></ul><p>值是一个字符串，其内容通常是数据的哈希值，每个数据都有一个单独的标志，只要这个文件发生了改变，这个标志就会发生变化。 服务器可以在响应中返回 ETag，然后浏览器会在后续的请求中携带上这个参数来确定缓存是否需要更新。如果 ETag 值相同，说明资源未更改，服务器会返回 <code>304（Not Modified）</code> 响应码，浏览器就知道本地缓存仍然是可以使用的</p><ul><li><code>Last-Modified</code></li></ul><p>服务器可以通过配置这个响应头，来向浏览器发送一个数据上次被修改的时间标签，例如：Last-Modified:Wed, 24 Apr 2019 02:54:16 GMT 这样浏览器就知道了该数据最后被修改的时间，后续请求中，会和服务器进行时间的比较，如果服务器上的时间比本地时间要新，说明数据有更改，浏览器需要重新下载数据。</p><p>补充一点，<code>response header</code>中的<code>etag</code>、<code>last-modified</code>在客户端重新向服务端发起请求时，会在 request header 中换个 key 名：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// response header
etag: &#39;5c20abbd-e2e8&#39;
last-modified: Mon, 24 Dec 2018 09:49:49 GMT

// request header 变为
if-none-matched: &#39;5c20abbd-e2e8&#39;
if-modified-since: Mon, 24 Dec 2018 09:49:49 GMT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="缓存位置" tabindex="-1"><a class="header-anchor" href="#缓存位置" aria-hidden="true">#</a> 缓存位置</h2><p>浏览器缓存的位置的话，可以分为四种,优先级从高到低排列分别：</p><ul><li><code>Service Worker</code></li><li><code>Memory Cache</code></li><li><code>Disk Cache</code></li><li><code>Push Cache</code></li></ul><p><strong>Service Worker</strong> 这个应用场景比如 PWA，它借鉴了 Web Worker 思路，由于它脱离了浏览器的窗体，因此无法直接访问 DOM。它能完成的功能比如：离线缓存、消息推送和网络代理，其中离线缓存就是「Service Worker Cache」。</p><p><strong>Memory Cache</strong> 指的是内存缓存，从效率上讲它是最快的，从存活时间来讲又是最短的，当渲染进程结束后，内存缓存也就不存在了。</p><p><strong>Disk Cache</strong> 存储在磁盘中的缓存，从存取效率上讲是比内存缓存慢的，优势在于存储容量和存储时长。</p><p><strong>Disk Cache VS Memory Cache</strong></p><p>两者对比，主要的策略</p><ul><li>内容使用率高的话，文件优先进入磁盘</li><li>比较大的 JS，CSS 文件会直接放入磁盘，反之放入内存</li></ul><p><strong>Push Cache</strong>推送缓存</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ol><li>首先检查<code>Cache-Control</code>， 看强缓存是否可用, 如果可用的话直接使用</li><li>否则进入协商缓存，发送HTTP请求，服务器通过请求头中的<code>If-Modified-Since</code>或者<code>If-None-Match</code>字段检查资源是否更新</li><li>资源更新，返回资源和200状态码。</li><li>否则，返回304，直接告诉浏览器直接从缓存中去资源</li></ol><h2 id="用户操作与缓存" tabindex="-1"><a class="header-anchor" href="#用户操作与缓存" aria-hidden="true">#</a> 用户操作与缓存</h2><ul><li>普通刷新：当按下<code>F5</code>或者点击刷新按钮来刷新页面的时候，浏览器将绕过本地缓存来发送请求到服务器, 此时, 协商缓存是有效的</li><li>强制刷新：当按下<code>ctrl+F5</code>来刷新页面的时候, 浏览器将绕过各种缓存(本地缓存和协商缓存), 直接让服务器返回最新的资源</li><li>回车或转向：当在地址栏上输入回车或者按下跳转按钮的时候, 所有缓存都生效</li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,41),h={href:"https://juejin.cn/post/6862711686705938445",target:"_blank",rel:"noopener noreferrer"};function p(u,m){const i=l("ExternalLinkIcon");return o(),r("div",null,[s,e("ul",null,[e("li",null,[e("a",h,[d("缓存"),c(i)])])])])}const x=a(t,[["render",p],["__file","cache.html.vue"]]);export{x as default};
