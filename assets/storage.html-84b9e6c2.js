import{_ as a,M as i,p as r,q as s,R as e,t as c,N as d,a1 as t}from"./framework-201fec1f.js";const l={},n=t('<h1 id="storage" tabindex="-1"><a class="header-anchor" href="#storage" aria-hidden="true">#</a> Storage</h1><p>前端本地存储的方式有三种，分别是</p><ul><li><code>cookie</code></li><li><code>localstorage</code></li><li><code>sessionStorage</code></li></ul><h2 id="cookie-和-session" tabindex="-1"><a class="header-anchor" href="#cookie-和-session" aria-hidden="true">#</a> <code>cookie</code> 和 <code>session</code></h2><p><code>cookie</code> 和 <code>session</code> 都是普遍用来跟踪浏览用户身份的会话方式。</p><ul><li><code>cookie</code> 数据存放在客户端，<code>session</code> 数据放在服务器端。</li><li><code>cookie</code> 本身并不安全，考虑到安全应当使用 <code>session</code>。</li><li><code>session</code> 会在一定时间内保存在服务器上。如果访问量比较大，会比较消耗服务器的性能。考虑到减轻服务器性能方面的开销，应当使用 <code>cookie</code> 。</li><li>单个 <code>cookie</code> 保存的数据不能超过 <code>4K</code>，很多浏览器都限制一个域名最多保存 <code>50</code> 个 cookie。</li><li>将登陆信息等重要信息存放为 <code>session</code>、其他信息如果需要保留，可以放在 <code>cookie</code> 中。</li></ul><h2 id="三者异同" tabindex="-1"><a class="header-anchor" href="#三者异同" aria-hidden="true">#</a> 三者异同</h2><h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h3><ul><li><p><code>cookie</code>：可设置失效时间，没有设置的话，默认是关闭浏览器后失效</p></li><li><p><code>localStorage</code>：除非被手动清除，否则将会永久保存。</p></li><li><p><code>sessionStorage</code>： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。</p></li></ul><h3 id="存放数据大小" tabindex="-1"><a class="header-anchor" href="#存放数据大小" aria-hidden="true">#</a> 存放数据大小</h3><ul><li><p><code>cookie</code>：<strong>4KB</strong> 左右</p></li><li><p><code>localStorage</code>和<code>sessionStorage</code>：可以保存 <strong>5MB</strong> 的信息</p></li></ul><h3 id="http-请求" tabindex="-1"><a class="header-anchor" href="#http-请求" aria-hidden="true">#</a> http 请求</h3><ul><li><p><code>cookie</code>：每次都会携带在<code>HTTP</code>头中，如果使用<code>cookie</code>保存过多数据会带来性能问题</p></li><li><p><code>localStorage</code>和<code>sessionStorage</code>：仅在客户端（即浏览器）中保存，不参与和服务器的通信</p></li></ul><h3 id="易用性" tabindex="-1"><a class="header-anchor" href="#易用性" aria-hidden="true">#</a> 易用性：</h3><p><code>cookie</code>：需要程序员自己封装，源生的<code>Cookie</code>接口不友好</p><p><code>localStorage</code>和<code>sessionStorage</code>：源生接口可以接受，亦可再次封装来对<code>Object</code>和<code>Array</code>有更好的支持</p><h3 id="跨域" tabindex="-1"><a class="header-anchor" href="#跨域" aria-hidden="true">#</a> 跨域</h3><ul><li><code>localStorage</code> 不可以跨域,可以跨页面</li><li><code>sessionStorage</code> 不可以跨域，不可以跨页面（刷新页面不会丢失）</li><li><code>cookie</code> 可以设置<code>domain</code>字段解决2级域名跨域问题</li></ul><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h2><p>从安全性来说，因为每次 http 请求都会携带 <code>cookie</code> 信息，这样无形中浪费了带宽，所以 <code>cookie</code> 应该尽可能少的使用，另外 <code>cookie</code> 还需要<strong>指定作用域</strong>，<strong>不可以跨域调用</strong>，限制比较多。但是用来识别用户登录来说，cookie 还是比 storage 更好用的。其他情况下，可以使用 storage，就用 storage。</p><p><code>storage</code> 在存储数据的大小上面秒杀了 <code>cookie</code>，现在基本上很少使用 <code>cookie</code> 了.</p><p><code>localStorage</code> 和 <code>sessionStorage</code> 唯一的差别一个是永久保存在浏览器里面，一个是关闭网页就清除了信息。</p><p><code>localStorage</code> 可以用来夸页面传递参数，<code>sessionStorage</code> 用来保存一些临时的数据，防止用户刷新页面之后丢失了一些参数。</p><h2 id="扩展阅读" tabindex="-1"><a class="header-anchor" href="#扩展阅读" aria-hidden="true">#</a> 扩展阅读</h2>',24),h={href:"https://juejin.cn/post/7002520994434777119",target:"_blank",rel:"noopener noreferrer"},p={href:"https://juejin.cn/post/6933115003327217671",target:"_blank",rel:"noopener noreferrer"};function g(u,k){const o=i("ExternalLinkIcon");return r(),s("div",null,[n,e("ul",null,[e("li",null,[e("a",h,[c("登录功能的实现"),d(o)])]),e("li",null,[e("a",p,[c("前端常见登录实现方案 + 单点登录方案"),d(o)])])])])}const f=a(l,[["render",g],["__file","storage.html.vue"]]);export{f as default};
